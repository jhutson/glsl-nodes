# Generated from GLSLParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,307,808,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,5,0,140,8,0,10,0,12,0,143,9,
        0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
        2,160,8,2,1,3,1,3,1,3,1,3,1,3,3,3,167,8,3,1,3,1,3,3,3,171,8,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,181,8,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,5,3,191,8,3,10,3,12,3,194,9,3,1,4,1,4,3,4,198,8,4,1,5,
        1,5,1,6,1,6,1,6,3,6,205,8,6,1,6,1,6,1,7,1,7,3,7,211,8,7,1,8,1,8,
        1,8,5,8,216,8,8,10,8,12,8,219,9,8,1,8,3,8,222,8,8,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,3,9,232,8,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        3,11,241,8,11,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,5,13,281,8,13,10,13,12,13,284,9,13,1,14,1,14,1,14,1,14,
        1,14,1,14,5,14,292,8,14,10,14,12,14,295,9,14,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,3,15,304,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,324,
        8,16,3,16,326,8,16,1,16,1,16,1,16,1,16,3,16,332,8,16,1,16,1,16,3,
        16,336,8,16,1,17,1,17,1,17,5,17,341,8,17,10,17,12,17,344,9,17,1,
        18,1,18,1,18,1,18,3,18,350,8,18,1,18,1,18,1,19,1,19,1,19,5,19,357,
        8,19,10,19,12,19,360,9,19,1,20,1,20,1,20,3,20,365,8,20,1,21,1,21,
        1,21,3,21,370,8,21,1,21,1,21,3,21,374,8,21,1,22,1,22,1,23,1,23,1,
        23,5,23,381,8,23,10,23,12,23,384,9,23,1,24,1,24,3,24,388,8,24,1,
        25,1,25,3,25,392,8,25,1,25,1,25,3,25,396,8,25,1,26,1,26,1,26,1,26,
        3,26,402,8,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,
        1,30,1,30,5,30,416,8,30,10,30,12,30,419,9,30,1,31,1,31,1,31,3,31,
        424,8,31,1,31,3,31,427,8,31,1,32,1,32,1,33,4,33,432,8,33,11,33,12,
        33,433,1,34,1,34,1,34,1,34,1,34,1,34,3,34,442,8,34,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,3,35,464,8,35,1,35,1,35,3,35,468,8,35,1,36,1,
        36,1,36,5,36,473,8,36,10,36,12,36,476,9,36,1,37,1,37,1,38,1,38,3,
        38,482,8,38,1,39,4,39,485,8,39,11,39,12,39,486,1,40,1,40,3,40,491,
        8,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,616,8,41,1,42,1,42,1,43,
        1,43,3,43,622,8,43,1,43,1,43,1,43,1,43,1,44,4,44,629,8,44,11,44,
        12,44,630,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,642,
        8,45,1,46,1,46,1,46,5,46,647,8,46,10,46,12,46,650,9,46,1,47,1,47,
        3,47,654,8,47,1,48,1,48,1,48,1,48,3,48,660,8,48,1,48,1,48,3,48,664,
        8,48,1,49,1,49,1,49,5,49,669,8,49,10,49,12,49,672,9,49,1,50,1,50,
        1,51,1,51,3,51,678,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,
        687,8,52,1,53,1,53,3,53,691,8,53,1,53,1,53,1,54,1,54,3,54,697,8,
        54,1,55,1,55,3,55,701,8,55,1,55,1,55,1,56,4,56,706,8,56,11,56,12,
        56,707,1,57,1,57,1,57,1,57,3,57,714,8,57,1,58,1,58,1,58,1,58,1,58,
        1,58,1,59,1,59,1,59,3,59,725,8,59,1,60,1,60,1,60,1,60,1,60,1,60,
        3,60,733,8,60,1,61,1,61,1,61,1,61,1,61,1,61,3,61,741,8,61,1,61,1,
        61,1,62,1,62,1,62,1,62,1,62,1,62,3,62,751,8,62,1,63,1,63,1,63,1,
        63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
        63,1,63,1,63,1,63,1,63,3,63,774,8,63,1,64,1,64,3,64,778,8,64,1,65,
        3,65,781,8,65,1,65,1,65,3,65,785,8,65,1,66,1,66,1,66,1,66,1,66,1,
        66,3,66,793,8,66,1,66,1,66,1,66,3,66,798,8,66,1,67,1,67,1,67,3,67,
        803,8,67,1,68,1,68,1,68,1,68,0,3,6,26,28,69,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
        104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
        136,0,9,4,0,208,208,212,212,234,234,246,246,10,0,204,204,206,206,
        214,214,217,217,222,222,227,228,231,231,237,237,245,245,248,248,
        2,0,233,233,243,244,2,0,212,212,234,234,2,0,225,225,240,240,3,0,
        218,218,220,221,236,236,2,0,216,216,229,229,3,0,35,35,108,108,138,
        138,3,0,38,38,94,94,107,107,981,0,141,1,0,0,0,2,146,1,0,0,0,4,159,
        1,0,0,0,6,170,1,0,0,0,8,197,1,0,0,0,10,199,1,0,0,0,12,201,1,0,0,
        0,14,210,1,0,0,0,16,221,1,0,0,0,18,231,1,0,0,0,20,233,1,0,0,0,22,
        240,1,0,0,0,24,242,1,0,0,0,26,244,1,0,0,0,28,285,1,0,0,0,30,303,
        1,0,0,0,32,335,1,0,0,0,34,337,1,0,0,0,36,345,1,0,0,0,38,353,1,0,
        0,0,40,361,1,0,0,0,42,373,1,0,0,0,44,375,1,0,0,0,46,377,1,0,0,0,
        48,385,1,0,0,0,50,389,1,0,0,0,52,401,1,0,0,0,54,403,1,0,0,0,56,405,
        1,0,0,0,58,407,1,0,0,0,60,412,1,0,0,0,62,426,1,0,0,0,64,428,1,0,
        0,0,66,431,1,0,0,0,68,441,1,0,0,0,70,467,1,0,0,0,72,469,1,0,0,0,
        74,477,1,0,0,0,76,479,1,0,0,0,78,484,1,0,0,0,80,488,1,0,0,0,82,615,
        1,0,0,0,84,617,1,0,0,0,86,619,1,0,0,0,88,628,1,0,0,0,90,641,1,0,
        0,0,92,643,1,0,0,0,94,651,1,0,0,0,96,663,1,0,0,0,98,665,1,0,0,0,
        100,673,1,0,0,0,102,677,1,0,0,0,104,686,1,0,0,0,106,688,1,0,0,0,
        108,696,1,0,0,0,110,698,1,0,0,0,112,705,1,0,0,0,114,713,1,0,0,0,
        116,715,1,0,0,0,118,721,1,0,0,0,120,732,1,0,0,0,122,734,1,0,0,0,
        124,750,1,0,0,0,126,773,1,0,0,0,128,777,1,0,0,0,130,780,1,0,0,0,
        132,797,1,0,0,0,134,802,1,0,0,0,136,804,1,0,0,0,138,140,3,134,67,
        0,139,138,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,
        0,142,144,1,0,0,0,143,141,1,0,0,0,144,145,5,0,0,1,145,1,1,0,0,0,
        146,147,5,257,0,0,147,3,1,0,0,0,148,160,3,2,1,0,149,160,5,155,0,
        0,150,160,5,34,0,0,151,160,5,252,0,0,152,160,5,253,0,0,153,160,5,
        251,0,0,154,160,5,250,0,0,155,156,5,226,0,0,156,157,3,28,14,0,157,
        158,5,241,0,0,158,160,1,0,0,0,159,148,1,0,0,0,159,149,1,0,0,0,159,
        150,1,0,0,0,159,151,1,0,0,0,159,152,1,0,0,0,159,153,1,0,0,0,159,
        154,1,0,0,0,159,155,1,0,0,0,160,5,1,0,0,0,161,162,6,3,-1,0,162,171,
        3,4,2,0,163,164,3,76,38,0,164,166,5,226,0,0,165,167,3,16,8,0,166,
        165,1,0,0,0,166,167,1,0,0,0,167,168,1,0,0,0,168,169,5,241,0,0,169,
        171,1,0,0,0,170,161,1,0,0,0,170,163,1,0,0,0,171,192,1,0,0,0,172,
        173,10,6,0,0,173,174,5,224,0,0,174,175,3,10,5,0,175,176,5,239,0,
        0,176,191,1,0,0,0,177,178,10,5,0,0,178,180,5,226,0,0,179,181,3,16,
        8,0,180,179,1,0,0,0,180,181,1,0,0,0,181,182,1,0,0,0,182,191,5,241,
        0,0,183,184,10,3,0,0,184,185,5,215,0,0,185,191,3,8,4,0,186,187,10,
        2,0,0,187,191,5,219,0,0,188,189,10,1,0,0,189,191,5,213,0,0,190,172,
        1,0,0,0,190,177,1,0,0,0,190,183,1,0,0,0,190,186,1,0,0,0,190,188,
        1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,7,1,
        0,0,0,194,192,1,0,0,0,195,198,3,2,1,0,196,198,3,12,6,0,197,195,1,
        0,0,0,197,196,1,0,0,0,198,9,1,0,0,0,199,200,3,28,14,0,200,11,1,0,
        0,0,201,202,3,14,7,0,202,204,5,226,0,0,203,205,3,16,8,0,204,203,
        1,0,0,0,204,205,1,0,0,0,205,206,1,0,0,0,206,207,5,241,0,0,207,13,
        1,0,0,0,208,211,3,76,38,0,209,211,3,6,3,0,210,208,1,0,0,0,210,209,
        1,0,0,0,211,15,1,0,0,0,212,217,3,22,11,0,213,214,5,211,0,0,214,216,
        3,22,11,0,215,213,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,
        1,0,0,0,218,222,1,0,0,0,219,217,1,0,0,0,220,222,5,200,0,0,221,212,
        1,0,0,0,221,220,1,0,0,0,222,17,1,0,0,0,223,232,3,6,3,0,224,225,5,
        219,0,0,225,232,3,18,9,0,226,227,5,213,0,0,227,232,3,18,9,0,228,
        229,3,20,10,0,229,230,3,18,9,0,230,232,1,0,0,0,231,223,1,0,0,0,231,
        224,1,0,0,0,231,226,1,0,0,0,231,228,1,0,0,0,232,19,1,0,0,0,233,234,
        7,0,0,0,234,21,1,0,0,0,235,241,3,30,15,0,236,237,3,18,9,0,237,238,
        3,24,12,0,238,239,3,22,11,0,239,241,1,0,0,0,240,235,1,0,0,0,240,
        236,1,0,0,0,241,23,1,0,0,0,242,243,7,1,0,0,243,25,1,0,0,0,244,245,
        6,13,-1,0,245,246,3,18,9,0,246,282,1,0,0,0,247,248,10,11,0,0,248,
        249,7,2,0,0,249,281,3,26,13,12,250,251,10,10,0,0,251,252,7,3,0,0,
        252,281,3,26,13,11,253,254,10,9,0,0,254,255,7,4,0,0,255,281,3,26,
        13,10,256,257,10,8,0,0,257,258,7,5,0,0,258,281,3,26,13,9,259,260,
        10,7,0,0,260,261,7,6,0,0,261,281,3,26,13,8,262,263,10,6,0,0,263,
        264,5,205,0,0,264,281,3,26,13,7,265,266,10,5,0,0,266,267,5,209,0,
        0,267,281,3,26,13,6,268,269,10,4,0,0,269,270,5,247,0,0,270,281,3,
        26,13,5,271,272,10,3,0,0,272,273,5,207,0,0,273,281,3,26,13,4,274,
        275,10,2,0,0,275,276,5,249,0,0,276,281,3,26,13,3,277,278,10,1,0,
        0,278,279,5,232,0,0,279,281,3,26,13,2,280,247,1,0,0,0,280,250,1,
        0,0,0,280,253,1,0,0,0,280,256,1,0,0,0,280,259,1,0,0,0,280,262,1,
        0,0,0,280,265,1,0,0,0,280,268,1,0,0,0,280,271,1,0,0,0,280,274,1,
        0,0,0,280,277,1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,1,
        0,0,0,283,27,1,0,0,0,284,282,1,0,0,0,285,286,6,14,-1,0,286,287,3,
        22,11,0,287,293,1,0,0,0,288,289,10,1,0,0,289,290,5,211,0,0,290,292,
        3,22,11,0,291,288,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,
        1,0,0,0,294,29,1,0,0,0,295,293,1,0,0,0,296,304,3,26,13,0,297,298,
        3,26,13,0,298,299,5,235,0,0,299,300,3,28,14,0,300,301,5,210,0,0,
        301,302,3,22,11,0,302,304,1,0,0,0,303,296,1,0,0,0,303,297,1,0,0,
        0,304,31,1,0,0,0,305,306,3,36,18,0,306,307,5,242,0,0,307,336,1,0,
        0,0,308,309,3,46,23,0,309,310,5,242,0,0,310,336,1,0,0,0,311,312,
        5,112,0,0,312,313,3,84,42,0,313,314,3,76,38,0,314,315,5,242,0,0,
        315,336,1,0,0,0,316,317,3,66,33,0,317,318,5,257,0,0,318,319,5,223,
        0,0,319,320,3,88,44,0,320,325,5,238,0,0,321,323,5,257,0,0,322,324,
        3,78,39,0,323,322,1,0,0,0,323,324,1,0,0,0,324,326,1,0,0,0,325,321,
        1,0,0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,328,5,242,0,0,328,336,
        1,0,0,0,329,331,3,66,33,0,330,332,3,34,17,0,331,330,1,0,0,0,331,
        332,1,0,0,0,332,333,1,0,0,0,333,334,5,242,0,0,334,336,1,0,0,0,335,
        305,1,0,0,0,335,308,1,0,0,0,335,311,1,0,0,0,335,316,1,0,0,0,335,
        329,1,0,0,0,336,33,1,0,0,0,337,342,5,257,0,0,338,339,5,211,0,0,339,
        341,5,257,0,0,340,338,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,
        343,1,0,0,0,343,35,1,0,0,0,344,342,1,0,0,0,345,346,3,52,26,0,346,
        347,5,257,0,0,347,349,5,226,0,0,348,350,3,38,19,0,349,348,1,0,0,
        0,349,350,1,0,0,0,350,351,1,0,0,0,351,352,5,241,0,0,352,37,1,0,0,
        0,353,358,3,42,21,0,354,355,5,211,0,0,355,357,3,42,21,0,356,354,
        1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,39,1,
        0,0,0,360,358,1,0,0,0,361,362,3,76,38,0,362,364,5,257,0,0,363,365,
        3,78,39,0,364,363,1,0,0,0,364,365,1,0,0,0,365,41,1,0,0,0,366,369,
        3,66,33,0,367,370,3,40,20,0,368,370,3,44,22,0,369,367,1,0,0,0,369,
        368,1,0,0,0,370,374,1,0,0,0,371,374,3,40,20,0,372,374,3,44,22,0,
        373,366,1,0,0,0,373,371,1,0,0,0,373,372,1,0,0,0,374,43,1,0,0,0,375,
        376,3,76,38,0,376,45,1,0,0,0,377,382,3,48,24,0,378,379,5,211,0,0,
        379,381,3,50,25,0,380,378,1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,
        0,382,383,1,0,0,0,383,47,1,0,0,0,384,382,1,0,0,0,385,387,3,52,26,
        0,386,388,3,50,25,0,387,386,1,0,0,0,387,388,1,0,0,0,388,49,1,0,0,
        0,389,391,5,257,0,0,390,392,3,78,39,0,391,390,1,0,0,0,391,392,1,
        0,0,0,392,395,1,0,0,0,393,394,5,217,0,0,394,396,3,96,48,0,395,393,
        1,0,0,0,395,396,1,0,0,0,396,51,1,0,0,0,397,402,3,76,38,0,398,399,
        3,66,33,0,399,400,3,76,38,0,400,402,1,0,0,0,401,397,1,0,0,0,401,
        398,1,0,0,0,402,53,1,0,0,0,403,404,5,65,0,0,404,55,1,0,0,0,405,406,
        7,7,0,0,406,57,1,0,0,0,407,408,5,93,0,0,408,409,5,226,0,0,409,410,
        3,60,30,0,410,411,5,241,0,0,411,59,1,0,0,0,412,417,3,62,31,0,413,
        414,5,211,0,0,414,416,3,62,31,0,415,413,1,0,0,0,416,419,1,0,0,0,
        417,415,1,0,0,0,417,418,1,0,0,0,418,61,1,0,0,0,419,417,1,0,0,0,420,
        423,5,257,0,0,421,422,5,217,0,0,422,424,3,30,15,0,423,421,1,0,0,
        0,423,424,1,0,0,0,424,427,1,0,0,0,425,427,5,137,0,0,426,420,1,0,
        0,0,426,425,1,0,0,0,427,63,1,0,0,0,428,429,5,111,0,0,429,65,1,0,
        0,0,430,432,3,68,34,0,431,430,1,0,0,0,432,433,1,0,0,0,433,431,1,
        0,0,0,433,434,1,0,0,0,434,67,1,0,0,0,435,442,3,70,35,0,436,442,3,
        58,29,0,437,442,3,84,42,0,438,442,3,56,28,0,439,442,3,54,27,0,440,
        442,3,64,32,0,441,435,1,0,0,0,441,436,1,0,0,0,441,437,1,0,0,0,441,
        438,1,0,0,0,441,439,1,0,0,0,441,440,1,0,0,0,442,69,1,0,0,0,443,468,
        5,12,0,0,444,468,5,62,0,0,445,468,5,109,0,0,446,468,5,63,0,0,447,
        468,5,10,0,0,448,468,5,110,0,0,449,468,5,116,0,0,450,468,5,168,0,
        0,451,468,5,5,0,0,452,468,5,137,0,0,453,468,5,11,0,0,454,468,5,201,
        0,0,455,468,5,114,0,0,456,468,5,113,0,0,457,468,5,203,0,0,458,463,
        5,142,0,0,459,460,5,226,0,0,460,461,3,72,36,0,461,462,5,241,0,0,
        462,464,1,0,0,0,463,459,1,0,0,0,463,464,1,0,0,0,464,468,1,0,0,0,
        465,468,5,2,0,0,466,468,5,196,0,0,467,443,1,0,0,0,467,444,1,0,0,
        0,467,445,1,0,0,0,467,446,1,0,0,0,467,447,1,0,0,0,467,448,1,0,0,
        0,467,449,1,0,0,0,467,450,1,0,0,0,467,451,1,0,0,0,467,452,1,0,0,
        0,467,453,1,0,0,0,467,454,1,0,0,0,467,455,1,0,0,0,467,456,1,0,0,
        0,467,457,1,0,0,0,467,458,1,0,0,0,467,465,1,0,0,0,467,466,1,0,0,
        0,468,71,1,0,0,0,469,474,3,74,37,0,470,471,5,211,0,0,471,473,3,74,
        37,0,472,470,1,0,0,0,473,476,1,0,0,0,474,472,1,0,0,0,474,475,1,0,
        0,0,475,73,1,0,0,0,476,474,1,0,0,0,477,478,5,257,0,0,478,75,1,0,
        0,0,479,481,3,82,41,0,480,482,3,78,39,0,481,480,1,0,0,0,481,482,
        1,0,0,0,482,77,1,0,0,0,483,485,3,80,40,0,484,483,1,0,0,0,485,486,
        1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,79,1,0,0,0,488,490,5,
        224,0,0,489,491,3,30,15,0,490,489,1,0,0,0,490,491,1,0,0,0,491,492,
        1,0,0,0,492,493,5,239,0,0,493,81,1,0,0,0,494,616,5,200,0,0,495,616,
        5,36,0,0,496,616,5,29,0,0,497,616,5,64,0,0,498,616,5,167,0,0,499,
        616,5,3,0,0,500,616,5,197,0,0,501,616,5,198,0,0,502,616,5,199,0,
        0,503,616,5,30,0,0,504,616,5,31,0,0,505,616,5,32,0,0,506,616,5,6,
        0,0,507,616,5,7,0,0,508,616,5,8,0,0,509,616,5,90,0,0,510,616,5,91,
        0,0,511,616,5,92,0,0,512,616,5,193,0,0,513,616,5,194,0,0,514,616,
        5,195,0,0,515,616,5,95,0,0,516,616,5,99,0,0,517,616,5,103,0,0,518,
        616,5,96,0,0,519,616,5,97,0,0,520,616,5,98,0,0,521,616,5,100,0,0,
        522,616,5,101,0,0,523,616,5,102,0,0,524,616,5,104,0,0,525,616,5,
        105,0,0,526,616,5,106,0,0,527,616,5,16,0,0,528,616,5,20,0,0,529,
        616,5,24,0,0,530,616,5,17,0,0,531,616,5,18,0,0,532,616,5,19,0,0,
        533,616,5,21,0,0,534,616,5,22,0,0,535,616,5,23,0,0,536,616,5,25,
        0,0,537,616,5,26,0,0,538,616,5,27,0,0,539,616,5,1,0,0,540,616,5,
        122,0,0,541,616,5,130,0,0,542,616,5,132,0,0,543,616,5,129,0,0,544,
        616,5,135,0,0,545,616,5,123,0,0,546,616,5,124,0,0,547,616,5,133,
        0,0,548,616,5,134,0,0,549,616,5,68,0,0,550,616,5,73,0,0,551,616,
        5,75,0,0,552,616,5,69,0,0,553,616,5,76,0,0,554,616,5,171,0,0,555,
        616,5,176,0,0,556,616,5,178,0,0,557,616,5,172,0,0,558,616,5,179,
        0,0,559,616,5,118,0,0,560,616,5,121,0,0,561,616,5,119,0,0,562,616,
        5,120,0,0,563,616,5,66,0,0,564,616,5,67,0,0,565,616,5,169,0,0,566,
        616,5,170,0,0,567,616,5,127,0,0,568,616,5,128,0,0,569,616,5,72,0,
        0,570,616,5,175,0,0,571,616,5,131,0,0,572,616,5,74,0,0,573,616,5,
        177,0,0,574,616,5,125,0,0,575,616,5,70,0,0,576,616,5,173,0,0,577,
        616,5,126,0,0,578,616,5,71,0,0,579,616,5,174,0,0,580,616,5,53,0,
        0,581,616,5,42,0,0,582,616,5,158,0,0,583,616,5,58,0,0,584,616,5,
        47,0,0,585,616,5,163,0,0,586,616,5,60,0,0,587,616,5,49,0,0,588,616,
        5,165,0,0,589,616,5,59,0,0,590,616,5,48,0,0,591,616,5,164,0,0,592,
        616,5,51,0,0,593,616,5,40,0,0,594,616,5,156,0,0,595,616,5,52,0,0,
        596,616,5,41,0,0,597,616,5,157,0,0,598,616,5,57,0,0,599,616,5,46,
        0,0,600,616,5,162,0,0,601,616,5,54,0,0,602,616,5,43,0,0,603,616,
        5,159,0,0,604,616,5,61,0,0,605,616,5,50,0,0,606,616,5,166,0,0,607,
        616,5,55,0,0,608,616,5,44,0,0,609,616,5,160,0,0,610,616,5,56,0,0,
        611,616,5,45,0,0,612,616,5,161,0,0,613,616,3,86,43,0,614,616,3,74,
        37,0,615,494,1,0,0,0,615,495,1,0,0,0,615,496,1,0,0,0,615,497,1,0,
        0,0,615,498,1,0,0,0,615,499,1,0,0,0,615,500,1,0,0,0,615,501,1,0,
        0,0,615,502,1,0,0,0,615,503,1,0,0,0,615,504,1,0,0,0,615,505,1,0,
        0,0,615,506,1,0,0,0,615,507,1,0,0,0,615,508,1,0,0,0,615,509,1,0,
        0,0,615,510,1,0,0,0,615,511,1,0,0,0,615,512,1,0,0,0,615,513,1,0,
        0,0,615,514,1,0,0,0,615,515,1,0,0,0,615,516,1,0,0,0,615,517,1,0,
        0,0,615,518,1,0,0,0,615,519,1,0,0,0,615,520,1,0,0,0,615,521,1,0,
        0,0,615,522,1,0,0,0,615,523,1,0,0,0,615,524,1,0,0,0,615,525,1,0,
        0,0,615,526,1,0,0,0,615,527,1,0,0,0,615,528,1,0,0,0,615,529,1,0,
        0,0,615,530,1,0,0,0,615,531,1,0,0,0,615,532,1,0,0,0,615,533,1,0,
        0,0,615,534,1,0,0,0,615,535,1,0,0,0,615,536,1,0,0,0,615,537,1,0,
        0,0,615,538,1,0,0,0,615,539,1,0,0,0,615,540,1,0,0,0,615,541,1,0,
        0,0,615,542,1,0,0,0,615,543,1,0,0,0,615,544,1,0,0,0,615,545,1,0,
        0,0,615,546,1,0,0,0,615,547,1,0,0,0,615,548,1,0,0,0,615,549,1,0,
        0,0,615,550,1,0,0,0,615,551,1,0,0,0,615,552,1,0,0,0,615,553,1,0,
        0,0,615,554,1,0,0,0,615,555,1,0,0,0,615,556,1,0,0,0,615,557,1,0,
        0,0,615,558,1,0,0,0,615,559,1,0,0,0,615,560,1,0,0,0,615,561,1,0,
        0,0,615,562,1,0,0,0,615,563,1,0,0,0,615,564,1,0,0,0,615,565,1,0,
        0,0,615,566,1,0,0,0,615,567,1,0,0,0,615,568,1,0,0,0,615,569,1,0,
        0,0,615,570,1,0,0,0,615,571,1,0,0,0,615,572,1,0,0,0,615,573,1,0,
        0,0,615,574,1,0,0,0,615,575,1,0,0,0,615,576,1,0,0,0,615,577,1,0,
        0,0,615,578,1,0,0,0,615,579,1,0,0,0,615,580,1,0,0,0,615,581,1,0,
        0,0,615,582,1,0,0,0,615,583,1,0,0,0,615,584,1,0,0,0,615,585,1,0,
        0,0,615,586,1,0,0,0,615,587,1,0,0,0,615,588,1,0,0,0,615,589,1,0,
        0,0,615,590,1,0,0,0,615,591,1,0,0,0,615,592,1,0,0,0,615,593,1,0,
        0,0,615,594,1,0,0,0,615,595,1,0,0,0,615,596,1,0,0,0,615,597,1,0,
        0,0,615,598,1,0,0,0,615,599,1,0,0,0,615,600,1,0,0,0,615,601,1,0,
        0,0,615,602,1,0,0,0,615,603,1,0,0,0,615,604,1,0,0,0,615,605,1,0,
        0,0,615,606,1,0,0,0,615,607,1,0,0,0,615,608,1,0,0,0,615,609,1,0,
        0,0,615,610,1,0,0,0,615,611,1,0,0,0,615,612,1,0,0,0,615,613,1,0,
        0,0,615,614,1,0,0,0,616,83,1,0,0,0,617,618,7,8,0,0,618,85,1,0,0,
        0,619,621,5,139,0,0,620,622,5,257,0,0,621,620,1,0,0,0,621,622,1,
        0,0,0,622,623,1,0,0,0,623,624,5,223,0,0,624,625,3,88,44,0,625,626,
        5,238,0,0,626,87,1,0,0,0,627,629,3,90,45,0,628,627,1,0,0,0,629,630,
        1,0,0,0,630,628,1,0,0,0,630,631,1,0,0,0,631,89,1,0,0,0,632,633,3,
        76,38,0,633,634,3,92,46,0,634,635,5,242,0,0,635,642,1,0,0,0,636,
        637,3,66,33,0,637,638,3,76,38,0,638,639,3,92,46,0,639,640,5,242,
        0,0,640,642,1,0,0,0,641,632,1,0,0,0,641,636,1,0,0,0,642,91,1,0,0,
        0,643,648,3,94,47,0,644,645,5,211,0,0,645,647,3,94,47,0,646,644,
        1,0,0,0,647,650,1,0,0,0,648,646,1,0,0,0,648,649,1,0,0,0,649,93,1,
        0,0,0,650,648,1,0,0,0,651,653,5,257,0,0,652,654,3,78,39,0,653,652,
        1,0,0,0,653,654,1,0,0,0,654,95,1,0,0,0,655,664,3,22,11,0,656,657,
        5,223,0,0,657,659,3,98,49,0,658,660,5,211,0,0,659,658,1,0,0,0,659,
        660,1,0,0,0,660,661,1,0,0,0,661,662,5,238,0,0,662,664,1,0,0,0,663,
        655,1,0,0,0,663,656,1,0,0,0,664,97,1,0,0,0,665,670,3,96,48,0,666,
        667,5,211,0,0,667,669,3,96,48,0,668,666,1,0,0,0,669,672,1,0,0,0,
        670,668,1,0,0,0,670,671,1,0,0,0,671,99,1,0,0,0,672,670,1,0,0,0,673,
        674,3,32,16,0,674,101,1,0,0,0,675,678,3,106,53,0,676,678,3,104,52,
        0,677,675,1,0,0,0,677,676,1,0,0,0,678,103,1,0,0,0,679,687,3,100,
        50,0,680,687,3,114,57,0,681,687,3,116,58,0,682,687,3,122,61,0,683,
        687,3,124,62,0,684,687,3,126,63,0,685,687,3,132,66,0,686,679,1,0,
        0,0,686,680,1,0,0,0,686,681,1,0,0,0,686,682,1,0,0,0,686,683,1,0,
        0,0,686,684,1,0,0,0,686,685,1,0,0,0,687,105,1,0,0,0,688,690,5,223,
        0,0,689,691,3,112,56,0,690,689,1,0,0,0,690,691,1,0,0,0,691,692,1,
        0,0,0,692,693,5,238,0,0,693,107,1,0,0,0,694,697,3,110,55,0,695,697,
        3,104,52,0,696,694,1,0,0,0,696,695,1,0,0,0,697,109,1,0,0,0,698,700,
        5,223,0,0,699,701,3,112,56,0,700,699,1,0,0,0,700,701,1,0,0,0,701,
        702,1,0,0,0,702,703,5,238,0,0,703,111,1,0,0,0,704,706,3,102,51,0,
        705,704,1,0,0,0,706,707,1,0,0,0,707,705,1,0,0,0,707,708,1,0,0,0,
        708,113,1,0,0,0,709,714,5,242,0,0,710,711,3,28,14,0,711,712,5,242,
        0,0,712,714,1,0,0,0,713,709,1,0,0,0,713,710,1,0,0,0,714,115,1,0,
        0,0,715,716,5,39,0,0,716,717,5,226,0,0,717,718,3,28,14,0,718,719,
        5,241,0,0,719,720,3,118,59,0,720,117,1,0,0,0,721,724,3,102,51,0,
        722,723,5,33,0,0,723,725,3,102,51,0,724,722,1,0,0,0,724,725,1,0,
        0,0,725,119,1,0,0,0,726,733,3,28,14,0,727,728,3,52,26,0,728,729,
        5,257,0,0,729,730,5,217,0,0,730,731,3,96,48,0,731,733,1,0,0,0,732,
        726,1,0,0,0,732,727,1,0,0,0,733,121,1,0,0,0,734,735,5,143,0,0,735,
        736,5,226,0,0,736,737,3,28,14,0,737,738,5,241,0,0,738,740,5,223,
        0,0,739,741,3,112,56,0,740,739,1,0,0,0,740,741,1,0,0,0,741,742,1,
        0,0,0,742,743,5,238,0,0,743,123,1,0,0,0,744,745,5,9,0,0,745,746,
        3,28,14,0,746,747,5,210,0,0,747,751,1,0,0,0,748,749,5,14,0,0,749,
        751,5,210,0,0,750,744,1,0,0,0,750,748,1,0,0,0,751,125,1,0,0,0,752,
        753,5,202,0,0,753,754,5,226,0,0,754,755,3,120,60,0,755,756,5,241,
        0,0,756,757,3,108,54,0,757,774,1,0,0,0,758,759,5,28,0,0,759,760,
        3,102,51,0,760,761,5,202,0,0,761,762,5,226,0,0,762,763,3,28,14,0,
        763,764,5,241,0,0,764,765,5,242,0,0,765,774,1,0,0,0,766,767,5,37,
        0,0,767,768,5,226,0,0,768,769,3,128,64,0,769,770,3,130,65,0,770,
        771,5,241,0,0,771,772,3,108,54,0,772,774,1,0,0,0,773,752,1,0,0,0,
        773,758,1,0,0,0,773,766,1,0,0,0,774,127,1,0,0,0,775,778,3,114,57,
        0,776,778,3,100,50,0,777,775,1,0,0,0,777,776,1,0,0,0,778,129,1,0,
        0,0,779,781,3,120,60,0,780,779,1,0,0,0,780,781,1,0,0,0,781,782,1,
        0,0,0,782,784,5,242,0,0,783,785,3,28,14,0,784,783,1,0,0,0,784,785,
        1,0,0,0,785,131,1,0,0,0,786,787,5,13,0,0,787,798,5,242,0,0,788,789,
        5,4,0,0,789,798,5,242,0,0,790,792,5,115,0,0,791,793,3,28,14,0,792,
        791,1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,794,798,5,242,0,0,795,
        796,5,15,0,0,796,798,5,242,0,0,797,786,1,0,0,0,797,788,1,0,0,0,797,
        790,1,0,0,0,797,795,1,0,0,0,798,133,1,0,0,0,799,803,3,136,68,0,800,
        803,3,32,16,0,801,803,5,242,0,0,802,799,1,0,0,0,802,800,1,0,0,0,
        802,801,1,0,0,0,803,135,1,0,0,0,804,805,3,36,18,0,805,806,3,110,
        55,0,806,137,1,0,0,0,71,141,159,166,170,180,190,192,197,204,210,
        217,221,231,240,280,282,293,303,323,325,331,335,342,349,358,364,
        369,373,382,387,391,395,401,417,423,426,433,441,463,467,474,481,
        486,490,615,621,630,641,648,653,659,663,670,677,686,690,696,700,
        707,713,724,732,740,750,773,777,780,784,792,797,802
    ]

class GLSLParser ( Parser ):

    grammarFileName = "GLSLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'atomic_uint'", "'attribute'", "'bool'", 
                     "'break'", "'buffer'", "'bvec2'", "'bvec3'", "'bvec4'", 
                     "'case'", "'centroid'", "'coherent'", "'const'", "'continue'", 
                     "'default'", "'discard'", "'dmat2'", "'dmat2x2'", "'dmat2x3'", 
                     "'dmat2x4'", "'dmat3'", "'dmat3x2'", "'dmat3x3'", "'dmat3x4'", 
                     "'dmat4'", "'dmat4x2'", "'dmat4x3'", "'dmat4x4'", "'do'", 
                     "'double'", "'dvec2'", "'dvec3'", "'dvec4'", "'else'", 
                     "'false'", "'flat'", "'float'", "'for'", "'highp'", 
                     "'if'", "'iimage1D'", "'iimage1DArray'", "'iimage2D'", 
                     "'iimage2DArray'", "'iimage2DMS'", "'iimage2DMSArray'", 
                     "'iimage2DRect'", "'iimage3D'", "'iimageBuffer'", "'iimageCube'", 
                     "'iimageCubeArray'", "'image1D'", "'image1DArray'", 
                     "'image2D'", "'image2DArray'", "'image2DMS'", "'image2DMSArray'", 
                     "'image2DRect'", "'image3D'", "'imageBuffer'", "'imageCube'", 
                     "'imageCubeArray'", "'in'", "'inout'", "'int'", "'invariant'", 
                     "'isampler1D'", "'isampler1DArray'", "'isampler2D'", 
                     "'isampler2DArray'", "'isampler2DMS'", "'isampler2DMSArray'", 
                     "'isampler2DRect'", "'isampler3D'", "'isamplerBuffer'", 
                     "'isamplerCube'", "'isamplerCubeArray'", "'isubpassInput'", 
                     "'isubpassInputMS'", "'itexture1D'", "'itexture1DArray'", 
                     "'itexture2D'", "'itexture2DArray'", "'itexture2DMS'", 
                     "'itexture2DMSArray'", "'itexture2DRect'", "'itexture3D'", 
                     "'itextureBuffer'", "'itextureCube'", "'itextureCubeArray'", 
                     "'ivec2'", "'ivec3'", "'ivec4'", "'layout'", "'lowp'", 
                     "'mat2'", "'mat2x2'", "'mat2x3'", "'mat2x4'", "'mat3'", 
                     "'mat3x2'", "'mat3x3'", "'mat3x4'", "'mat4'", "'mat4x2'", 
                     "'mat4x3'", "'mat4x4'", "'mediump'", "'noperspective'", 
                     "'out'", "'patch'", "'precise'", "'precision'", "'readonly'", 
                     "'restrict'", "'return'", "'sample'", "'sampler'", 
                     "'sampler1D'", "'sampler1DArray'", "'sampler1DArrayShadow'", 
                     "'sampler1DShadow'", "'sampler2D'", "'sampler2DArray'", 
                     "'sampler2DArrayShadow'", "'sampler2DMS'", "'sampler2DMSArray'", 
                     "'sampler2DRect'", "'sampler2DRectShadow'", "'sampler2DShadow'", 
                     "'sampler3D'", "'samplerBuffer'", "'samplerCube'", 
                     "'samplerCubeArray'", "'samplerCubeArrayShadow'", "'samplerCubeShadow'", 
                     "'samplerShadow'", "'shared'", "'smooth'", "'struct'", 
                     "'subpassInput'", "'subpassInputMS'", "'subroutine'", 
                     "'switch'", "'texture1D'", "'texture1DArray'", "'texture2D'", 
                     "'texture2DArray'", "'texture2DMS'", "'texture2DMSArray'", 
                     "'texture2DRect'", "'texture3D'", "'textureBuffer'", 
                     "'textureCube'", "'textureCubeArray'", "'true'", "'uimage1D'", 
                     "'uimage1DArray'", "'uimage2D'", "'uimage2DArray'", 
                     "'uimage2DMS'", "'uimage2DMSArray'", "'uimage2DRect'", 
                     "'uimage3D'", "'uimageBuffer'", "'uimageCube'", "'uimageCubeArray'", 
                     "'uint'", "'uniform'", "'usampler1D'", "'usampler1DArray'", 
                     "'usampler2D'", "'usampler2DArray'", "'usampler2DMS'", 
                     "'usampler2DMSArray'", "'usampler2DRect'", "'usampler3D'", 
                     "'usamplerBuffer'", "'usamplerCube'", "'usamplerCubeArray'", 
                     "'usubpassInput'", "'usubpassInputMS'", "'utexture1D'", 
                     "'utexture1DArray'", "'utexture2D'", "'utexture2DArray'", 
                     "'utexture2DMS'", "'utexture2DMSArray'", "'utexture2DRect'", 
                     "'utexture3D'", "'utextureBuffer'", "'utextureCube'", 
                     "'utextureCubeArray'", "'uvec2'", "'uvec3'", "'uvec4'", 
                     "'varying'", "'vec2'", "'vec3'", "'vec4'", "'void'", 
                     "'volatile'", "'while'", "'writeonly'", "'+='", "'&'", 
                     "'&='", "'&&'", "'!'", "'^'", "':'", "','", "'-'", 
                     "'--'", "'/='", "'.'", "'=='", "'='", "'>='", "'++'", 
                     "'<='", "'<'", "'<<='", "'{'", "'['", "'<<'", "'('", 
                     "'%='", "'*='", "'!='", "<INVALID>", "'|='", "'||'", 
                     "'%'", "'+'", "'?'", "'>'", "'>>='", "'}'", "']'", 
                     "'>>'", "')'", "';'", "'/'", "'*'", "'-='", "'~'", 
                     "'|'", "'^='", "'^^'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'debug'", "<INVALID>", "'off'", "'on'", 
                     "'optimize'", "<INVALID>", "'STDGL'" ]

    symbolicNames = [ "<INVALID>", "ATOMIC_UINT", "ATTRIBUTE", "BOOL", "BREAK", 
                      "BUFFER", "BVEC2", "BVEC3", "BVEC4", "CASE", "CENTROID", 
                      "COHERENT", "CONST", "CONTINUE", "DEFAULT", "DISCARD", 
                      "DMAT2", "DMAT2X2", "DMAT2X3", "DMAT2X4", "DMAT3", 
                      "DMAT3X2", "DMAT3X3", "DMAT3X4", "DMAT4", "DMAT4X2", 
                      "DMAT4X3", "DMAT4X4", "DO", "DOUBLE", "DVEC2", "DVEC3", 
                      "DVEC4", "ELSE", "FALSE", "FLAT", "FLOAT", "FOR", 
                      "HIGHP", "IF", "IIMAGE1D", "IIMAGE1DARRAY", "IIMAGE2D", 
                      "IIMAGE2DARRAY", "IIMAGE2DMS", "IIMAGE2DMSARRAY", 
                      "IIMAGE2DRECT", "IIMAGE3D", "IIMAGEBUFFER", "IIMAGECUBE", 
                      "IIMAGECUBEARRAY", "IMAGE1D", "IMAGE1DARRAY", "IMAGE2D", 
                      "IMAGE2DARRAY", "IMAGE2DMS", "IMAGE2DMSARRAY", "IMAGE2DRECT", 
                      "IMAGE3D", "IMAGEBUFFER", "IMAGECUBE", "IMAGECUBEARRAY", 
                      "IN", "INOUT", "INT", "INVARIANT", "ISAMPLER1D", "ISAMPLER1DARRAY", 
                      "ISAMPLER2D", "ISAMPLER2DARRAY", "ISAMPLER2DMS", "ISAMPLER2DMSARRAY", 
                      "ISAMPLER2DRECT", "ISAMPLER3D", "ISAMPLERBUFFER", 
                      "ISAMPLERCUBE", "ISAMPLERCUBEARRAY", "ISUBPASSINPUT", 
                      "ISUBPASSINPUTMS", "ITEXTURE1D", "ITEXTURE1DARRAY", 
                      "ITEXTURE2D", "ITEXTURE2DARRAY", "ITEXTURE2DMS", "ITEXTURE2DMSARRAY", 
                      "ITEXTURE2DRECT", "ITEXTURE3D", "ITEXTUREBUFFER", 
                      "ITEXTURECUBE", "ITEXTURECUBEARRAY", "IVEC2", "IVEC3", 
                      "IVEC4", "LAYOUT", "LOWP", "MAT2", "MAT2X2", "MAT2X3", 
                      "MAT2X4", "MAT3", "MAT3X2", "MAT3X3", "MAT3X4", "MAT4", 
                      "MAT4X2", "MAT4X3", "MAT4X4", "MEDIUMP", "NOPERSPECTIVE", 
                      "OUT", "PATCH", "PRECISE", "PRECISION", "READONLY", 
                      "RESTRICT", "RETURN", "SAMPLE", "SAMPLER", "SAMPLER1D", 
                      "SAMPLER1DARRAY", "SAMPLER1DARRAYSHADOW", "SAMPLER1DSHADOW", 
                      "SAMPLER2D", "SAMPLER2DARRAY", "SAMPLER2DARRAYSHADOW", 
                      "SAMPLER2DMS", "SAMPLER2DMSARRAY", "SAMPLER2DRECT", 
                      "SAMPLER2DRECTSHADOW", "SAMPLER2DSHADOW", "SAMPLER3D", 
                      "SAMPLERBUFFER", "SAMPLERCUBE", "SAMPLERCUBEARRAY", 
                      "SAMPLERCUBEARRAYSHADOW", "SAMPLERCUBESHADOW", "SAMPLERSHADOW", 
                      "SHARED", "SMOOTH", "STRUCT", "SUBPASSINPUT", "SUBPASSINPUTMS", 
                      "SUBROUTINE", "SWITCH", "TEXTURE1D", "TEXTURE1DARRAY", 
                      "TEXTURE2D", "TEXTURE2DARRAY", "TEXTURE2DMS", "TEXTURE2DMSARRAY", 
                      "TEXTURE2DRECT", "TEXTURE3D", "TEXTUREBUFFER", "TEXTURECUBE", 
                      "TEXTURECUBEARRAY", "TRUE", "UIMAGE1D", "UIMAGE1DARRAY", 
                      "UIMAGE2D", "UIMAGE2DARRAY", "UIMAGE2DMS", "UIMAGE2DMSARRAY", 
                      "UIMAGE2DRECT", "UIMAGE3D", "UIMAGEBUFFER", "UIMAGECUBE", 
                      "UIMAGECUBEARRAY", "UINT", "UNIFORM", "USAMPLER1D", 
                      "USAMPLER1DARRAY", "USAMPLER2D", "USAMPLER2DARRAY", 
                      "USAMPLER2DMS", "USAMPLER2DMSARRAY", "USAMPLER2DRECT", 
                      "USAMPLER3D", "USAMPLERBUFFER", "USAMPLERCUBE", "USAMPLERCUBEARRAY", 
                      "USUBPASSINPUT", "USUBPASSINPUTMS", "UTEXTURE1D", 
                      "UTEXTURE1DARRAY", "UTEXTURE2D", "UTEXTURE2DARRAY", 
                      "UTEXTURE2DMS", "UTEXTURE2DMSARRAY", "UTEXTURE2DRECT", 
                      "UTEXTURE3D", "UTEXTUREBUFFER", "UTEXTURECUBE", "UTEXTURECUBEARRAY", 
                      "UVEC2", "UVEC3", "UVEC4", "VARYING", "VEC2", "VEC3", 
                      "VEC4", "VOID", "VOLATILE", "WHILE", "WRITEONLY", 
                      "ADD_ASSIGN", "AMPERSAND", "AND_ASSIGN", "AND_OP", 
                      "BANG", "CARET", "COLON", "COMMA", "DASH", "DEC_OP", 
                      "DIV_ASSIGN", "DOT", "EQ_OP", "EQUAL", "GE_OP", "INC_OP", 
                      "LE_OP", "LEFT_ANGLE", "LEFT_ASSIGN", "LEFT_BRACE", 
                      "LEFT_BRACKET", "LEFT_OP", "LEFT_PAREN", "MOD_ASSIGN", 
                      "MUL_ASSIGN", "NE_OP", "NUMBER_SIGN", "OR_ASSIGN", 
                      "OR_OP", "PERCENT", "PLUS", "QUESTION", "RIGHT_ANGLE", 
                      "RIGHT_ASSIGN", "RIGHT_BRACE", "RIGHT_BRACKET", "RIGHT_OP", 
                      "RIGHT_PAREN", "SEMICOLON", "SLASH", "STAR", "SUB_ASSIGN", 
                      "TILDE", "VERTICAL_BAR", "XOR_ASSIGN", "XOR_OP", "DOUBLECONSTANT", 
                      "FLOATCONSTANT", "INTCONSTANT", "UINTCONSTANT", "BLOCK_COMMENT", 
                      "LINE_COMMENT", "LINE_CONTINUATION", "IDENTIFIER", 
                      "WHITE_SPACE", "DEFINE_DIRECTIVE", "ELIF_DIRECTIVE", 
                      "ELSE_DIRECTIVE", "ENDIF_DIRECTIVE", "ERROR_DIRECTIVE", 
                      "EXTENSION_DIRECTIVE", "IF_DIRECTIVE", "IFDEF_DIRECTIVE", 
                      "IFNDEF_DIRECTIVE", "LINE_DIRECTIVE", "PRAGMA_DIRECTIVE", 
                      "UNDEF_DIRECTIVE", "VERSION_DIRECTIVE", "SPACE_TAB_0", 
                      "NEWLINE_0", "MACRO_NAME", "NEWLINE_1", "SPACE_TAB_1", 
                      "CONSTANT_EXPRESSION", "NEWLINE_2", "ERROR_MESSAGE", 
                      "NEWLINE_3", "BEHAVIOR", "EXTENSION_NAME", "NEWLINE_4", 
                      "SPACE_TAB_2", "NEWLINE_5", "MACRO_IDENTIFIER", "NEWLINE_6", 
                      "SPACE_TAB_3", "LINE_EXPRESSION", "NEWLINE_7", "MACRO_ESC_NEWLINE", 
                      "MACRO_TEXT", "NEWLINE_8", "DEBUG", "NEWLINE_9", "OFF", 
                      "ON", "OPTIMIZE", "SPACE_TAB_5", "STDGL", "PROGRAM_TEXT", 
                      "NEWLINE_10", "SPACE_TAB_6", "NEWLINE_11", "NUMBER", 
                      "PROFILE", "SPACE_TAB_7" ]

    RULE_translation_unit = 0
    RULE_variable_identifier = 1
    RULE_primary_expression = 2
    RULE_postfix_expression = 3
    RULE_field_selection = 4
    RULE_integer_expression = 5
    RULE_function_call = 6
    RULE_function_identifier = 7
    RULE_function_call_parameters = 8
    RULE_unary_expression = 9
    RULE_unary_operator = 10
    RULE_assignment_expression = 11
    RULE_assignment_operator = 12
    RULE_binary_expression = 13
    RULE_expression = 14
    RULE_constant_expression = 15
    RULE_declaration = 16
    RULE_identifier_list = 17
    RULE_function_prototype = 18
    RULE_function_parameters = 19
    RULE_parameter_declarator = 20
    RULE_parameter_declaration = 21
    RULE_parameter_type_specifier = 22
    RULE_init_declarator_list = 23
    RULE_single_declaration = 24
    RULE_typeless_declaration = 25
    RULE_fully_specified_type = 26
    RULE_invariant_qualifier = 27
    RULE_interpolation_qualifier = 28
    RULE_layout_qualifier = 29
    RULE_layout_qualifier_id_list = 30
    RULE_layout_qualifier_id = 31
    RULE_precise_qualifier = 32
    RULE_type_qualifier = 33
    RULE_single_type_qualifier = 34
    RULE_storage_qualifier = 35
    RULE_type_name_list = 36
    RULE_type_name = 37
    RULE_type_specifier = 38
    RULE_array_specifier = 39
    RULE_dimension = 40
    RULE_type_specifier_nonarray = 41
    RULE_precision_qualifier = 42
    RULE_struct_specifier = 43
    RULE_struct_declaration_list = 44
    RULE_struct_declaration = 45
    RULE_struct_declarator_list = 46
    RULE_struct_declarator = 47
    RULE_initializer = 48
    RULE_initializer_list = 49
    RULE_declaration_statement = 50
    RULE_statement = 51
    RULE_simple_statement = 52
    RULE_compound_statement = 53
    RULE_statement_no_new_scope = 54
    RULE_compound_statement_no_new_scope = 55
    RULE_statement_list = 56
    RULE_expression_statement = 57
    RULE_selection_statement = 58
    RULE_selection_rest_statement = 59
    RULE_condition = 60
    RULE_switch_statement = 61
    RULE_case_label = 62
    RULE_iteration_statement = 63
    RULE_for_init_statement = 64
    RULE_for_rest_statement = 65
    RULE_jump_statement = 66
    RULE_external_declaration = 67
    RULE_function_definition = 68

    ruleNames =  [ "translation_unit", "variable_identifier", "primary_expression", 
                   "postfix_expression", "field_selection", "integer_expression", 
                   "function_call", "function_identifier", "function_call_parameters", 
                   "unary_expression", "unary_operator", "assignment_expression", 
                   "assignment_operator", "binary_expression", "expression", 
                   "constant_expression", "declaration", "identifier_list", 
                   "function_prototype", "function_parameters", "parameter_declarator", 
                   "parameter_declaration", "parameter_type_specifier", 
                   "init_declarator_list", "single_declaration", "typeless_declaration", 
                   "fully_specified_type", "invariant_qualifier", "interpolation_qualifier", 
                   "layout_qualifier", "layout_qualifier_id_list", "layout_qualifier_id", 
                   "precise_qualifier", "type_qualifier", "single_type_qualifier", 
                   "storage_qualifier", "type_name_list", "type_name", "type_specifier", 
                   "array_specifier", "dimension", "type_specifier_nonarray", 
                   "precision_qualifier", "struct_specifier", "struct_declaration_list", 
                   "struct_declaration", "struct_declarator_list", "struct_declarator", 
                   "initializer", "initializer_list", "declaration_statement", 
                   "statement", "simple_statement", "compound_statement", 
                   "statement_no_new_scope", "compound_statement_no_new_scope", 
                   "statement_list", "expression_statement", "selection_statement", 
                   "selection_rest_statement", "condition", "switch_statement", 
                   "case_label", "iteration_statement", "for_init_statement", 
                   "for_rest_statement", "jump_statement", "external_declaration", 
                   "function_definition" ]

    EOF = Token.EOF
    ATOMIC_UINT=1
    ATTRIBUTE=2
    BOOL=3
    BREAK=4
    BUFFER=5
    BVEC2=6
    BVEC3=7
    BVEC4=8
    CASE=9
    CENTROID=10
    COHERENT=11
    CONST=12
    CONTINUE=13
    DEFAULT=14
    DISCARD=15
    DMAT2=16
    DMAT2X2=17
    DMAT2X3=18
    DMAT2X4=19
    DMAT3=20
    DMAT3X2=21
    DMAT3X3=22
    DMAT3X4=23
    DMAT4=24
    DMAT4X2=25
    DMAT4X3=26
    DMAT4X4=27
    DO=28
    DOUBLE=29
    DVEC2=30
    DVEC3=31
    DVEC4=32
    ELSE=33
    FALSE=34
    FLAT=35
    FLOAT=36
    FOR=37
    HIGHP=38
    IF=39
    IIMAGE1D=40
    IIMAGE1DARRAY=41
    IIMAGE2D=42
    IIMAGE2DARRAY=43
    IIMAGE2DMS=44
    IIMAGE2DMSARRAY=45
    IIMAGE2DRECT=46
    IIMAGE3D=47
    IIMAGEBUFFER=48
    IIMAGECUBE=49
    IIMAGECUBEARRAY=50
    IMAGE1D=51
    IMAGE1DARRAY=52
    IMAGE2D=53
    IMAGE2DARRAY=54
    IMAGE2DMS=55
    IMAGE2DMSARRAY=56
    IMAGE2DRECT=57
    IMAGE3D=58
    IMAGEBUFFER=59
    IMAGECUBE=60
    IMAGECUBEARRAY=61
    IN=62
    INOUT=63
    INT=64
    INVARIANT=65
    ISAMPLER1D=66
    ISAMPLER1DARRAY=67
    ISAMPLER2D=68
    ISAMPLER2DARRAY=69
    ISAMPLER2DMS=70
    ISAMPLER2DMSARRAY=71
    ISAMPLER2DRECT=72
    ISAMPLER3D=73
    ISAMPLERBUFFER=74
    ISAMPLERCUBE=75
    ISAMPLERCUBEARRAY=76
    ISUBPASSINPUT=77
    ISUBPASSINPUTMS=78
    ITEXTURE1D=79
    ITEXTURE1DARRAY=80
    ITEXTURE2D=81
    ITEXTURE2DARRAY=82
    ITEXTURE2DMS=83
    ITEXTURE2DMSARRAY=84
    ITEXTURE2DRECT=85
    ITEXTURE3D=86
    ITEXTUREBUFFER=87
    ITEXTURECUBE=88
    ITEXTURECUBEARRAY=89
    IVEC2=90
    IVEC3=91
    IVEC4=92
    LAYOUT=93
    LOWP=94
    MAT2=95
    MAT2X2=96
    MAT2X3=97
    MAT2X4=98
    MAT3=99
    MAT3X2=100
    MAT3X3=101
    MAT3X4=102
    MAT4=103
    MAT4X2=104
    MAT4X3=105
    MAT4X4=106
    MEDIUMP=107
    NOPERSPECTIVE=108
    OUT=109
    PATCH=110
    PRECISE=111
    PRECISION=112
    READONLY=113
    RESTRICT=114
    RETURN=115
    SAMPLE=116
    SAMPLER=117
    SAMPLER1D=118
    SAMPLER1DARRAY=119
    SAMPLER1DARRAYSHADOW=120
    SAMPLER1DSHADOW=121
    SAMPLER2D=122
    SAMPLER2DARRAY=123
    SAMPLER2DARRAYSHADOW=124
    SAMPLER2DMS=125
    SAMPLER2DMSARRAY=126
    SAMPLER2DRECT=127
    SAMPLER2DRECTSHADOW=128
    SAMPLER2DSHADOW=129
    SAMPLER3D=130
    SAMPLERBUFFER=131
    SAMPLERCUBE=132
    SAMPLERCUBEARRAY=133
    SAMPLERCUBEARRAYSHADOW=134
    SAMPLERCUBESHADOW=135
    SAMPLERSHADOW=136
    SHARED=137
    SMOOTH=138
    STRUCT=139
    SUBPASSINPUT=140
    SUBPASSINPUTMS=141
    SUBROUTINE=142
    SWITCH=143
    TEXTURE1D=144
    TEXTURE1DARRAY=145
    TEXTURE2D=146
    TEXTURE2DARRAY=147
    TEXTURE2DMS=148
    TEXTURE2DMSARRAY=149
    TEXTURE2DRECT=150
    TEXTURE3D=151
    TEXTUREBUFFER=152
    TEXTURECUBE=153
    TEXTURECUBEARRAY=154
    TRUE=155
    UIMAGE1D=156
    UIMAGE1DARRAY=157
    UIMAGE2D=158
    UIMAGE2DARRAY=159
    UIMAGE2DMS=160
    UIMAGE2DMSARRAY=161
    UIMAGE2DRECT=162
    UIMAGE3D=163
    UIMAGEBUFFER=164
    UIMAGECUBE=165
    UIMAGECUBEARRAY=166
    UINT=167
    UNIFORM=168
    USAMPLER1D=169
    USAMPLER1DARRAY=170
    USAMPLER2D=171
    USAMPLER2DARRAY=172
    USAMPLER2DMS=173
    USAMPLER2DMSARRAY=174
    USAMPLER2DRECT=175
    USAMPLER3D=176
    USAMPLERBUFFER=177
    USAMPLERCUBE=178
    USAMPLERCUBEARRAY=179
    USUBPASSINPUT=180
    USUBPASSINPUTMS=181
    UTEXTURE1D=182
    UTEXTURE1DARRAY=183
    UTEXTURE2D=184
    UTEXTURE2DARRAY=185
    UTEXTURE2DMS=186
    UTEXTURE2DMSARRAY=187
    UTEXTURE2DRECT=188
    UTEXTURE3D=189
    UTEXTUREBUFFER=190
    UTEXTURECUBE=191
    UTEXTURECUBEARRAY=192
    UVEC2=193
    UVEC3=194
    UVEC4=195
    VARYING=196
    VEC2=197
    VEC3=198
    VEC4=199
    VOID=200
    VOLATILE=201
    WHILE=202
    WRITEONLY=203
    ADD_ASSIGN=204
    AMPERSAND=205
    AND_ASSIGN=206
    AND_OP=207
    BANG=208
    CARET=209
    COLON=210
    COMMA=211
    DASH=212
    DEC_OP=213
    DIV_ASSIGN=214
    DOT=215
    EQ_OP=216
    EQUAL=217
    GE_OP=218
    INC_OP=219
    LE_OP=220
    LEFT_ANGLE=221
    LEFT_ASSIGN=222
    LEFT_BRACE=223
    LEFT_BRACKET=224
    LEFT_OP=225
    LEFT_PAREN=226
    MOD_ASSIGN=227
    MUL_ASSIGN=228
    NE_OP=229
    NUMBER_SIGN=230
    OR_ASSIGN=231
    OR_OP=232
    PERCENT=233
    PLUS=234
    QUESTION=235
    RIGHT_ANGLE=236
    RIGHT_ASSIGN=237
    RIGHT_BRACE=238
    RIGHT_BRACKET=239
    RIGHT_OP=240
    RIGHT_PAREN=241
    SEMICOLON=242
    SLASH=243
    STAR=244
    SUB_ASSIGN=245
    TILDE=246
    VERTICAL_BAR=247
    XOR_ASSIGN=248
    XOR_OP=249
    DOUBLECONSTANT=250
    FLOATCONSTANT=251
    INTCONSTANT=252
    UINTCONSTANT=253
    BLOCK_COMMENT=254
    LINE_COMMENT=255
    LINE_CONTINUATION=256
    IDENTIFIER=257
    WHITE_SPACE=258
    DEFINE_DIRECTIVE=259
    ELIF_DIRECTIVE=260
    ELSE_DIRECTIVE=261
    ENDIF_DIRECTIVE=262
    ERROR_DIRECTIVE=263
    EXTENSION_DIRECTIVE=264
    IF_DIRECTIVE=265
    IFDEF_DIRECTIVE=266
    IFNDEF_DIRECTIVE=267
    LINE_DIRECTIVE=268
    PRAGMA_DIRECTIVE=269
    UNDEF_DIRECTIVE=270
    VERSION_DIRECTIVE=271
    SPACE_TAB_0=272
    NEWLINE_0=273
    MACRO_NAME=274
    NEWLINE_1=275
    SPACE_TAB_1=276
    CONSTANT_EXPRESSION=277
    NEWLINE_2=278
    ERROR_MESSAGE=279
    NEWLINE_3=280
    BEHAVIOR=281
    EXTENSION_NAME=282
    NEWLINE_4=283
    SPACE_TAB_2=284
    NEWLINE_5=285
    MACRO_IDENTIFIER=286
    NEWLINE_6=287
    SPACE_TAB_3=288
    LINE_EXPRESSION=289
    NEWLINE_7=290
    MACRO_ESC_NEWLINE=291
    MACRO_TEXT=292
    NEWLINE_8=293
    DEBUG=294
    NEWLINE_9=295
    OFF=296
    ON=297
    OPTIMIZE=298
    SPACE_TAB_5=299
    STDGL=300
    PROGRAM_TEXT=301
    NEWLINE_10=302
    SPACE_TAB_6=303
    NEWLINE_11=304
    NUMBER=305
    PROFILE=306
    SPACE_TAB_7=307

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Translation_unitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(GLSLParser.EOF, 0)

        def external_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GLSLParser.External_declarationContext)
            else:
                return self.getTypedRuleContext(GLSLParser.External_declarationContext,i)


        def getRuleIndex(self):
            return GLSLParser.RULE_translation_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslation_unit" ):
                listener.enterTranslation_unit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslation_unit" ):
                listener.exitTranslation_unit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTranslation_unit" ):
                return visitor.visitTranslation_unit(self)
            else:
                return visitor.visitChildren(self)




    def translation_unit(self):

        localctx = GLSLParser.Translation_unitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translation_unit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -713233064466) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -11258999135526913) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4503599358955263) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 562949953422847) != 0) or _la==257:
                self.state = 138
                self.external_declaration()
                self.state = 143
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 144
            self.match(GLSLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GLSLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_variable_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_identifier" ):
                listener.enterVariable_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_identifier" ):
                listener.exitVariable_identifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_identifier" ):
                return visitor.visitVariable_identifier(self)
            else:
                return visitor.visitChildren(self)




    def variable_identifier(self):

        localctx = GLSLParser.Variable_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_variable_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 146
            self.match(GLSLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self):
            return self.getTypedRuleContext(GLSLParser.Variable_identifierContext,0)


        def TRUE(self):
            return self.getToken(GLSLParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(GLSLParser.FALSE, 0)

        def INTCONSTANT(self):
            return self.getToken(GLSLParser.INTCONSTANT, 0)

        def UINTCONSTANT(self):
            return self.getToken(GLSLParser.UINTCONSTANT, 0)

        def FLOATCONSTANT(self):
            return self.getToken(GLSLParser.FLOATCONSTANT, 0)

        def DOUBLECONSTANT(self):
            return self.getToken(GLSLParser.DOUBLECONSTANT, 0)

        def LEFT_PAREN(self):
            return self.getToken(GLSLParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(GLSLParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GLSLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_primary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expression" ):
                listener.enterPrimary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expression" ):
                listener.exitPrimary_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary_expression" ):
                return visitor.visitPrimary_expression(self)
            else:
                return visitor.visitChildren(self)




    def primary_expression(self):

        localctx = GLSLParser.Primary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_primary_expression)
        try:
            self.state = 159
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [257]:
                self.enterOuterAlt(localctx, 1)
                self.state = 148
                self.variable_identifier()
                pass
            elif token in [155]:
                self.enterOuterAlt(localctx, 2)
                self.state = 149
                self.match(GLSLParser.TRUE)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 3)
                self.state = 150
                self.match(GLSLParser.FALSE)
                pass
            elif token in [252]:
                self.enterOuterAlt(localctx, 4)
                self.state = 151
                self.match(GLSLParser.INTCONSTANT)
                pass
            elif token in [253]:
                self.enterOuterAlt(localctx, 5)
                self.state = 152
                self.match(GLSLParser.UINTCONSTANT)
                pass
            elif token in [251]:
                self.enterOuterAlt(localctx, 6)
                self.state = 153
                self.match(GLSLParser.FLOATCONSTANT)
                pass
            elif token in [250]:
                self.enterOuterAlt(localctx, 7)
                self.state = 154
                self.match(GLSLParser.DOUBLECONSTANT)
                pass
            elif token in [226]:
                self.enterOuterAlt(localctx, 8)
                self.state = 155
                self.match(GLSLParser.LEFT_PAREN)
                self.state = 156
                self.expression(0)
                self.state = 157
                self.match(GLSLParser.RIGHT_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_expression(self):
            return self.getTypedRuleContext(GLSLParser.Primary_expressionContext,0)


        def type_specifier(self):
            return self.getTypedRuleContext(GLSLParser.Type_specifierContext,0)


        def LEFT_PAREN(self):
            return self.getToken(GLSLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GLSLParser.RIGHT_PAREN, 0)

        def function_call_parameters(self):
            return self.getTypedRuleContext(GLSLParser.Function_call_parametersContext,0)


        def postfix_expression(self):
            return self.getTypedRuleContext(GLSLParser.Postfix_expressionContext,0)


        def LEFT_BRACKET(self):
            return self.getToken(GLSLParser.LEFT_BRACKET, 0)

        def integer_expression(self):
            return self.getTypedRuleContext(GLSLParser.Integer_expressionContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(GLSLParser.RIGHT_BRACKET, 0)

        def DOT(self):
            return self.getToken(GLSLParser.DOT, 0)

        def field_selection(self):
            return self.getTypedRuleContext(GLSLParser.Field_selectionContext,0)


        def INC_OP(self):
            return self.getToken(GLSLParser.INC_OP, 0)

        def DEC_OP(self):
            return self.getToken(GLSLParser.DEC_OP, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_postfix_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfix_expression" ):
                listener.enterPostfix_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfix_expression" ):
                listener.exitPostfix_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfix_expression" ):
                return visitor.visitPostfix_expression(self)
            else:
                return visitor.visitChildren(self)



    def postfix_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GLSLParser.Postfix_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 6
        self.enterRecursionRule(localctx, 6, self.RULE_postfix_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 162
                self.primary_expression()
                pass

            elif la_ == 2:
                self.state = 163
                self.type_specifier()
                self.state = 164
                self.match(GLSLParser.LEFT_PAREN)
                self.state = 166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -6917529530286505755) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -4501401023543297) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & -9222246411859393985) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -8138003422817533829) != 0):
                    self.state = 165
                    self.function_call_parameters()


                self.state = 168
                self.match(GLSLParser.RIGHT_PAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 192
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 190
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
                    if la_ == 1:
                        localctx = GLSLParser.Postfix_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_expression)
                        self.state = 172
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 173
                        self.match(GLSLParser.LEFT_BRACKET)
                        self.state = 174
                        self.integer_expression()
                        self.state = 175
                        self.match(GLSLParser.RIGHT_BRACKET)
                        pass

                    elif la_ == 2:
                        localctx = GLSLParser.Postfix_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_expression)
                        self.state = 177
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 178
                        self.match(GLSLParser.LEFT_PAREN)
                        self.state = 180
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -6917529530286505755) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -4501401023543297) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & -9222246411859393985) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -8138003422817533829) != 0):
                            self.state = 179
                            self.function_call_parameters()


                        self.state = 182
                        self.match(GLSLParser.RIGHT_PAREN)
                        pass

                    elif la_ == 3:
                        localctx = GLSLParser.Postfix_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_expression)
                        self.state = 183
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 184
                        self.match(GLSLParser.DOT)
                        self.state = 185
                        self.field_selection()
                        pass

                    elif la_ == 4:
                        localctx = GLSLParser.Postfix_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_expression)
                        self.state = 186
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 187
                        self.match(GLSLParser.INC_OP)
                        pass

                    elif la_ == 5:
                        localctx = GLSLParser.Postfix_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_expression)
                        self.state = 188
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 189
                        self.match(GLSLParser.DEC_OP)
                        pass

             
                self.state = 194
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Field_selectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_identifier(self):
            return self.getTypedRuleContext(GLSLParser.Variable_identifierContext,0)


        def function_call(self):
            return self.getTypedRuleContext(GLSLParser.Function_callContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_field_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_selection" ):
                listener.enterField_selection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_selection" ):
                listener.exitField_selection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_selection" ):
                return visitor.visitField_selection(self)
            else:
                return visitor.visitChildren(self)




    def field_selection(self):

        localctx = GLSLParser.Field_selectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_field_selection)
        try:
            self.state = 197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 195
                self.variable_identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 196
                self.function_call()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GLSLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_integer_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_expression" ):
                listener.enterInteger_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_expression" ):
                listener.exitInteger_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger_expression" ):
                return visitor.visitInteger_expression(self)
            else:
                return visitor.visitChildren(self)




    def integer_expression(self):

        localctx = GLSLParser.Integer_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_integer_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_identifier(self):
            return self.getTypedRuleContext(GLSLParser.Function_identifierContext,0)


        def LEFT_PAREN(self):
            return self.getToken(GLSLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GLSLParser.RIGHT_PAREN, 0)

        def function_call_parameters(self):
            return self.getTypedRuleContext(GLSLParser.Function_call_parametersContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call" ):
                return visitor.visitFunction_call(self)
            else:
                return visitor.visitChildren(self)




    def function_call(self):

        localctx = GLSLParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            self.function_identifier()
            self.state = 202
            self.match(GLSLParser.LEFT_PAREN)
            self.state = 204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -6917529530286505755) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -4501401023543297) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & -9222246411859393985) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -8138003422817533829) != 0):
                self.state = 203
                self.function_call_parameters()


            self.state = 206
            self.match(GLSLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_specifier(self):
            return self.getTypedRuleContext(GLSLParser.Type_specifierContext,0)


        def postfix_expression(self):
            return self.getTypedRuleContext(GLSLParser.Postfix_expressionContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_function_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_identifier" ):
                listener.enterFunction_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_identifier" ):
                listener.exitFunction_identifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_identifier" ):
                return visitor.visitFunction_identifier(self)
            else:
                return visitor.visitChildren(self)




    def function_identifier(self):

        localctx = GLSLParser.Function_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_function_identifier)
        try:
            self.state = 210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 208
                self.type_specifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 209
                self.postfix_expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_call_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GLSLParser.Assignment_expressionContext)
            else:
                return self.getTypedRuleContext(GLSLParser.Assignment_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GLSLParser.COMMA)
            else:
                return self.getToken(GLSLParser.COMMA, i)

        def VOID(self):
            return self.getToken(GLSLParser.VOID, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_function_call_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_parameters" ):
                listener.enterFunction_call_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_parameters" ):
                listener.exitFunction_call_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call_parameters" ):
                return visitor.visitFunction_call_parameters(self)
            else:
                return visitor.visitChildren(self)




    def function_call_parameters(self):

        localctx = GLSLParser.Function_call_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_function_call_parameters)
        self._la = 0 # Token type
        try:
            self.state = 221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 212
                self.assignment_expression()
                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==211:
                    self.state = 213
                    self.match(GLSLParser.COMMA)
                    self.state = 214
                    self.assignment_expression()
                    self.state = 219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 220
                self.match(GLSLParser.VOID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfix_expression(self):
            return self.getTypedRuleContext(GLSLParser.Postfix_expressionContext,0)


        def INC_OP(self):
            return self.getToken(GLSLParser.INC_OP, 0)

        def unary_expression(self):
            return self.getTypedRuleContext(GLSLParser.Unary_expressionContext,0)


        def DEC_OP(self):
            return self.getToken(GLSLParser.DEC_OP, 0)

        def unary_operator(self):
            return self.getTypedRuleContext(GLSLParser.Unary_operatorContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_unary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_expression" ):
                listener.enterUnary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_expression" ):
                listener.exitUnary_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_expression" ):
                return visitor.visitUnary_expression(self)
            else:
                return visitor.visitChildren(self)




    def unary_expression(self):

        localctx = GLSLParser.Unary_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_unary_expression)
        try:
            self.state = 231
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 6, 7, 8, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 193, 194, 195, 197, 198, 199, 200, 226, 250, 251, 252, 253, 257]:
                self.enterOuterAlt(localctx, 1)
                self.state = 223
                self.postfix_expression(0)
                pass
            elif token in [219]:
                self.enterOuterAlt(localctx, 2)
                self.state = 224
                self.match(GLSLParser.INC_OP)
                self.state = 225
                self.unary_expression()
                pass
            elif token in [213]:
                self.enterOuterAlt(localctx, 3)
                self.state = 226
                self.match(GLSLParser.DEC_OP)
                self.state = 227
                self.unary_expression()
                pass
            elif token in [208, 212, 234, 246]:
                self.enterOuterAlt(localctx, 4)
                self.state = 228
                self.unary_operator()
                self.state = 229
                self.unary_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(GLSLParser.PLUS, 0)

        def DASH(self):
            return self.getToken(GLSLParser.DASH, 0)

        def BANG(self):
            return self.getToken(GLSLParser.BANG, 0)

        def TILDE(self):
            return self.getToken(GLSLParser.TILDE, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator" ):
                return visitor.visitUnary_operator(self)
            else:
                return visitor.visitChildren(self)




    def unary_operator(self):

        localctx = GLSLParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            _la = self._input.LA(1)
            if not(((((_la - 208)) & ~0x3f) == 0 and ((1 << (_la - 208)) & 274945015825) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_expression(self):
            return self.getTypedRuleContext(GLSLParser.Constant_expressionContext,0)


        def unary_expression(self):
            return self.getTypedRuleContext(GLSLParser.Unary_expressionContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(GLSLParser.Assignment_operatorContext,0)


        def assignment_expression(self):
            return self.getTypedRuleContext(GLSLParser.Assignment_expressionContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_assignment_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_expression" ):
                listener.enterAssignment_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_expression" ):
                listener.exitAssignment_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_expression" ):
                return visitor.visitAssignment_expression(self)
            else:
                return visitor.visitChildren(self)




    def assignment_expression(self):

        localctx = GLSLParser.Assignment_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_assignment_expression)
        try:
            self.state = 240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 235
                self.constant_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 236
                self.unary_expression()
                self.state = 237
                self.assignment_operator()
                self.state = 238
                self.assignment_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(GLSLParser.EQUAL, 0)

        def MUL_ASSIGN(self):
            return self.getToken(GLSLParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(GLSLParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(GLSLParser.MOD_ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(GLSLParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(GLSLParser.SUB_ASSIGN, 0)

        def LEFT_ASSIGN(self):
            return self.getToken(GLSLParser.LEFT_ASSIGN, 0)

        def RIGHT_ASSIGN(self):
            return self.getToken(GLSLParser.RIGHT_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(GLSLParser.AND_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(GLSLParser.XOR_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(GLSLParser.OR_ASSIGN, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_operator" ):
                return visitor.visitAssignment_operator(self)
            else:
                return visitor.visitChildren(self)




    def assignment_operator(self):

        localctx = GLSLParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_assignment_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            _la = self._input.LA(1)
            if not(((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & 19799958889477) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expression(self):
            return self.getTypedRuleContext(GLSLParser.Unary_expressionContext,0)


        def binary_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GLSLParser.Binary_expressionContext)
            else:
                return self.getTypedRuleContext(GLSLParser.Binary_expressionContext,i)


        def STAR(self):
            return self.getToken(GLSLParser.STAR, 0)

        def SLASH(self):
            return self.getToken(GLSLParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(GLSLParser.PERCENT, 0)

        def PLUS(self):
            return self.getToken(GLSLParser.PLUS, 0)

        def DASH(self):
            return self.getToken(GLSLParser.DASH, 0)

        def LEFT_OP(self):
            return self.getToken(GLSLParser.LEFT_OP, 0)

        def RIGHT_OP(self):
            return self.getToken(GLSLParser.RIGHT_OP, 0)

        def LEFT_ANGLE(self):
            return self.getToken(GLSLParser.LEFT_ANGLE, 0)

        def RIGHT_ANGLE(self):
            return self.getToken(GLSLParser.RIGHT_ANGLE, 0)

        def LE_OP(self):
            return self.getToken(GLSLParser.LE_OP, 0)

        def GE_OP(self):
            return self.getToken(GLSLParser.GE_OP, 0)

        def EQ_OP(self):
            return self.getToken(GLSLParser.EQ_OP, 0)

        def NE_OP(self):
            return self.getToken(GLSLParser.NE_OP, 0)

        def AMPERSAND(self):
            return self.getToken(GLSLParser.AMPERSAND, 0)

        def CARET(self):
            return self.getToken(GLSLParser.CARET, 0)

        def VERTICAL_BAR(self):
            return self.getToken(GLSLParser.VERTICAL_BAR, 0)

        def AND_OP(self):
            return self.getToken(GLSLParser.AND_OP, 0)

        def XOR_OP(self):
            return self.getToken(GLSLParser.XOR_OP, 0)

        def OR_OP(self):
            return self.getToken(GLSLParser.OR_OP, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_binary_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_expression" ):
                listener.enterBinary_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_expression" ):
                listener.exitBinary_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary_expression" ):
                return visitor.visitBinary_expression(self)
            else:
                return visitor.visitChildren(self)



    def binary_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GLSLParser.Binary_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 26
        self.enterRecursionRule(localctx, 26, self.RULE_binary_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.unary_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 282
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 280
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                    if la_ == 1:
                        localctx = GLSLParser.Binary_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 247
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 248
                        _la = self._input.LA(1)
                        if not(((((_la - 233)) & ~0x3f) == 0 and ((1 << (_la - 233)) & 3073) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 249
                        self.binary_expression(12)
                        pass

                    elif la_ == 2:
                        localctx = GLSLParser.Binary_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 250
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 251
                        _la = self._input.LA(1)
                        if not(_la==212 or _la==234):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 252
                        self.binary_expression(11)
                        pass

                    elif la_ == 3:
                        localctx = GLSLParser.Binary_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 253
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 254
                        _la = self._input.LA(1)
                        if not(_la==225 or _la==240):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 255
                        self.binary_expression(10)
                        pass

                    elif la_ == 4:
                        localctx = GLSLParser.Binary_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 256
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 257
                        _la = self._input.LA(1)
                        if not(((((_la - 218)) & ~0x3f) == 0 and ((1 << (_la - 218)) & 262157) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 258
                        self.binary_expression(9)
                        pass

                    elif la_ == 5:
                        localctx = GLSLParser.Binary_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 259
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 260
                        _la = self._input.LA(1)
                        if not(_la==216 or _la==229):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 261
                        self.binary_expression(8)
                        pass

                    elif la_ == 6:
                        localctx = GLSLParser.Binary_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 262
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 263
                        self.match(GLSLParser.AMPERSAND)
                        self.state = 264
                        self.binary_expression(7)
                        pass

                    elif la_ == 7:
                        localctx = GLSLParser.Binary_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 265
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 266
                        self.match(GLSLParser.CARET)
                        self.state = 267
                        self.binary_expression(6)
                        pass

                    elif la_ == 8:
                        localctx = GLSLParser.Binary_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 268
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 269
                        self.match(GLSLParser.VERTICAL_BAR)
                        self.state = 270
                        self.binary_expression(5)
                        pass

                    elif la_ == 9:
                        localctx = GLSLParser.Binary_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 271
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 272
                        self.match(GLSLParser.AND_OP)
                        self.state = 273
                        self.binary_expression(4)
                        pass

                    elif la_ == 10:
                        localctx = GLSLParser.Binary_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 274
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 275
                        self.match(GLSLParser.XOR_OP)
                        self.state = 276
                        self.binary_expression(3)
                        pass

                    elif la_ == 11:
                        localctx = GLSLParser.Binary_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_binary_expression)
                        self.state = 277
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 278
                        self.match(GLSLParser.OR_OP)
                        self.state = 279
                        self.binary_expression(2)
                        pass

             
                self.state = 284
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment_expression(self):
            return self.getTypedRuleContext(GLSLParser.Assignment_expressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(GLSLParser.ExpressionContext,0)


        def COMMA(self):
            return self.getToken(GLSLParser.COMMA, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GLSLParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 28
        self.enterRecursionRule(localctx, 28, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.assignment_expression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 293
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = GLSLParser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 288
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 289
                    self.match(GLSLParser.COMMA)
                    self.state = 290
                    self.assignment_expression() 
                self.state = 295
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Constant_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binary_expression(self):
            return self.getTypedRuleContext(GLSLParser.Binary_expressionContext,0)


        def QUESTION(self):
            return self.getToken(GLSLParser.QUESTION, 0)

        def expression(self):
            return self.getTypedRuleContext(GLSLParser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(GLSLParser.COLON, 0)

        def assignment_expression(self):
            return self.getTypedRuleContext(GLSLParser.Assignment_expressionContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_constant_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expression" ):
                listener.enterConstant_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expression" ):
                listener.exitConstant_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_expression" ):
                return visitor.visitConstant_expression(self)
            else:
                return visitor.visitChildren(self)




    def constant_expression(self):

        localctx = GLSLParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_constant_expression)
        try:
            self.state = 303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 296
                self.binary_expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 297
                self.binary_expression(0)
                self.state = 298
                self.match(GLSLParser.QUESTION)
                self.state = 299
                self.expression(0)
                self.state = 300
                self.match(GLSLParser.COLON)
                self.state = 301
                self.assignment_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_prototype(self):
            return self.getTypedRuleContext(GLSLParser.Function_prototypeContext,0)


        def SEMICOLON(self):
            return self.getToken(GLSLParser.SEMICOLON, 0)

        def init_declarator_list(self):
            return self.getTypedRuleContext(GLSLParser.Init_declarator_listContext,0)


        def PRECISION(self):
            return self.getToken(GLSLParser.PRECISION, 0)

        def precision_qualifier(self):
            return self.getTypedRuleContext(GLSLParser.Precision_qualifierContext,0)


        def type_specifier(self):
            return self.getTypedRuleContext(GLSLParser.Type_specifierContext,0)


        def type_qualifier(self):
            return self.getTypedRuleContext(GLSLParser.Type_qualifierContext,0)


        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(GLSLParser.IDENTIFIER)
            else:
                return self.getToken(GLSLParser.IDENTIFIER, i)

        def LEFT_BRACE(self):
            return self.getToken(GLSLParser.LEFT_BRACE, 0)

        def struct_declaration_list(self):
            return self.getTypedRuleContext(GLSLParser.Struct_declaration_listContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(GLSLParser.RIGHT_BRACE, 0)

        def array_specifier(self):
            return self.getTypedRuleContext(GLSLParser.Array_specifierContext,0)


        def identifier_list(self):
            return self.getTypedRuleContext(GLSLParser.Identifier_listContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = GLSLParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 305
                self.function_prototype()
                self.state = 306
                self.match(GLSLParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 308
                self.init_declarator_list()
                self.state = 309
                self.match(GLSLParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 311
                self.match(GLSLParser.PRECISION)
                self.state = 312
                self.precision_qualifier()
                self.state = 313
                self.type_specifier()
                self.state = 314
                self.match(GLSLParser.SEMICOLON)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 316
                self.type_qualifier()
                self.state = 317
                self.match(GLSLParser.IDENTIFIER)
                self.state = 318
                self.match(GLSLParser.LEFT_BRACE)
                self.state = 319
                self.struct_declaration_list()
                self.state = 320
                self.match(GLSLParser.RIGHT_BRACE)
                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==257:
                    self.state = 321
                    self.match(GLSLParser.IDENTIFIER)
                    self.state = 323
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==224:
                        self.state = 322
                        self.array_specifier()




                self.state = 327
                self.match(GLSLParser.SEMICOLON)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 329
                self.type_qualifier()
                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==257:
                    self.state = 330
                    self.identifier_list()


                self.state = 333
                self.match(GLSLParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Identifier_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(GLSLParser.IDENTIFIER)
            else:
                return self.getToken(GLSLParser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GLSLParser.COMMA)
            else:
                return self.getToken(GLSLParser.COMMA, i)

        def getRuleIndex(self):
            return GLSLParser.RULE_identifier_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier_list" ):
                listener.enterIdentifier_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier_list" ):
                listener.exitIdentifier_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier_list" ):
                return visitor.visitIdentifier_list(self)
            else:
                return visitor.visitChildren(self)




    def identifier_list(self):

        localctx = GLSLParser.Identifier_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_identifier_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.match(GLSLParser.IDENTIFIER)
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==211:
                self.state = 338
                self.match(GLSLParser.COMMA)
                self.state = 339
                self.match(GLSLParser.IDENTIFIER)
                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_prototypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fully_specified_type(self):
            return self.getTypedRuleContext(GLSLParser.Fully_specified_typeContext,0)


        def IDENTIFIER(self):
            return self.getToken(GLSLParser.IDENTIFIER, 0)

        def LEFT_PAREN(self):
            return self.getToken(GLSLParser.LEFT_PAREN, 0)

        def RIGHT_PAREN(self):
            return self.getToken(GLSLParser.RIGHT_PAREN, 0)

        def function_parameters(self):
            return self.getTypedRuleContext(GLSLParser.Function_parametersContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_function_prototype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_prototype" ):
                listener.enterFunction_prototype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_prototype" ):
                listener.exitFunction_prototype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_prototype" ):
                return visitor.visitFunction_prototype(self)
            else:
                return visitor.visitChildren(self)




    def function_prototype(self):

        localctx = GLSLParser.Function_prototypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_function_prototype)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.fully_specified_type()
            self.state = 346
            self.match(GLSLParser.IDENTIFIER)
            self.state = 347
            self.match(GLSLParser.LEFT_PAREN)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -713233064466) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -11540474112237569) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4503599358955263) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 1535) != 0) or _la==257:
                self.state = 348
                self.function_parameters()


            self.state = 351
            self.match(GLSLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GLSLParser.Parameter_declarationContext)
            else:
                return self.getTypedRuleContext(GLSLParser.Parameter_declarationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GLSLParser.COMMA)
            else:
                return self.getToken(GLSLParser.COMMA, i)

        def getRuleIndex(self):
            return GLSLParser.RULE_function_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_parameters" ):
                listener.enterFunction_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_parameters" ):
                listener.exitFunction_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_parameters" ):
                return visitor.visitFunction_parameters(self)
            else:
                return visitor.visitChildren(self)




    def function_parameters(self):

        localctx = GLSLParser.Function_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_function_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.parameter_declaration()
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==211:
                self.state = 354
                self.match(GLSLParser.COMMA)
                self.state = 355
                self.parameter_declaration()
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_specifier(self):
            return self.getTypedRuleContext(GLSLParser.Type_specifierContext,0)


        def IDENTIFIER(self):
            return self.getToken(GLSLParser.IDENTIFIER, 0)

        def array_specifier(self):
            return self.getTypedRuleContext(GLSLParser.Array_specifierContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_parameter_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_declarator" ):
                listener.enterParameter_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_declarator" ):
                listener.exitParameter_declarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_declarator" ):
                return visitor.visitParameter_declarator(self)
            else:
                return visitor.visitChildren(self)




    def parameter_declarator(self):

        localctx = GLSLParser.Parameter_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_parameter_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.type_specifier()
            self.state = 362
            self.match(GLSLParser.IDENTIFIER)
            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224:
                self.state = 363
                self.array_specifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_qualifier(self):
            return self.getTypedRuleContext(GLSLParser.Type_qualifierContext,0)


        def parameter_declarator(self):
            return self.getTypedRuleContext(GLSLParser.Parameter_declaratorContext,0)


        def parameter_type_specifier(self):
            return self.getTypedRuleContext(GLSLParser.Parameter_type_specifierContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_parameter_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_declaration" ):
                listener.enterParameter_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_declaration" ):
                listener.exitParameter_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_declaration" ):
                return visitor.visitParameter_declaration(self)
            else:
                return visitor.visitChildren(self)




    def parameter_declaration(self):

        localctx = GLSLParser.Parameter_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_parameter_declaration)
        try:
            self.state = 373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 366
                self.type_qualifier()
                self.state = 369
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 367
                    self.parameter_declarator()
                    pass

                elif la_ == 2:
                    self.state = 368
                    self.parameter_type_specifier()
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 371
                self.parameter_declarator()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 372
                self.parameter_type_specifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_type_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_specifier(self):
            return self.getTypedRuleContext(GLSLParser.Type_specifierContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_parameter_type_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_type_specifier" ):
                listener.enterParameter_type_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_type_specifier" ):
                listener.exitParameter_type_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_type_specifier" ):
                return visitor.visitParameter_type_specifier(self)
            else:
                return visitor.visitChildren(self)




    def parameter_type_specifier(self):

        localctx = GLSLParser.Parameter_type_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_parameter_type_specifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.type_specifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_declarator_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_declaration(self):
            return self.getTypedRuleContext(GLSLParser.Single_declarationContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GLSLParser.COMMA)
            else:
                return self.getToken(GLSLParser.COMMA, i)

        def typeless_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GLSLParser.Typeless_declarationContext)
            else:
                return self.getTypedRuleContext(GLSLParser.Typeless_declarationContext,i)


        def getRuleIndex(self):
            return GLSLParser.RULE_init_declarator_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_declarator_list" ):
                listener.enterInit_declarator_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_declarator_list" ):
                listener.exitInit_declarator_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInit_declarator_list" ):
                return visitor.visitInit_declarator_list(self)
            else:
                return visitor.visitChildren(self)




    def init_declarator_list(self):

        localctx = GLSLParser.Init_declarator_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_init_declarator_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.single_declaration()
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==211:
                self.state = 378
                self.match(GLSLParser.COMMA)
                self.state = 379
                self.typeless_declaration()
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fully_specified_type(self):
            return self.getTypedRuleContext(GLSLParser.Fully_specified_typeContext,0)


        def typeless_declaration(self):
            return self.getTypedRuleContext(GLSLParser.Typeless_declarationContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_single_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_declaration" ):
                listener.enterSingle_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_declaration" ):
                listener.exitSingle_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_declaration" ):
                return visitor.visitSingle_declaration(self)
            else:
                return visitor.visitChildren(self)




    def single_declaration(self):

        localctx = GLSLParser.Single_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_single_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.fully_specified_type()
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==257:
                self.state = 386
                self.typeless_declaration()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Typeless_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GLSLParser.IDENTIFIER, 0)

        def array_specifier(self):
            return self.getTypedRuleContext(GLSLParser.Array_specifierContext,0)


        def EQUAL(self):
            return self.getToken(GLSLParser.EQUAL, 0)

        def initializer(self):
            return self.getTypedRuleContext(GLSLParser.InitializerContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_typeless_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeless_declaration" ):
                listener.enterTypeless_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeless_declaration" ):
                listener.exitTypeless_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeless_declaration" ):
                return visitor.visitTypeless_declaration(self)
            else:
                return visitor.visitChildren(self)




    def typeless_declaration(self):

        localctx = GLSLParser.Typeless_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_typeless_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.match(GLSLParser.IDENTIFIER)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224:
                self.state = 390
                self.array_specifier()


            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==217:
                self.state = 393
                self.match(GLSLParser.EQUAL)
                self.state = 394
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fully_specified_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_specifier(self):
            return self.getTypedRuleContext(GLSLParser.Type_specifierContext,0)


        def type_qualifier(self):
            return self.getTypedRuleContext(GLSLParser.Type_qualifierContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_fully_specified_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFully_specified_type" ):
                listener.enterFully_specified_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFully_specified_type" ):
                listener.exitFully_specified_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFully_specified_type" ):
                return visitor.visitFully_specified_type(self)
            else:
                return visitor.visitChildren(self)




    def fully_specified_type(self):

        localctx = GLSLParser.Fully_specified_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_fully_specified_type)
        try:
            self.state = 401
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 6, 7, 8, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 193, 194, 195, 197, 198, 199, 200, 257]:
                self.enterOuterAlt(localctx, 1)
                self.state = 397
                self.type_specifier()
                pass
            elif token in [2, 5, 10, 11, 12, 35, 38, 62, 63, 65, 93, 94, 107, 108, 109, 110, 111, 113, 114, 116, 137, 138, 142, 168, 196, 201, 203]:
                self.enterOuterAlt(localctx, 2)
                self.state = 398
                self.type_qualifier()
                self.state = 399
                self.type_specifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Invariant_qualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INVARIANT(self):
            return self.getToken(GLSLParser.INVARIANT, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_invariant_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvariant_qualifier" ):
                listener.enterInvariant_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvariant_qualifier" ):
                listener.exitInvariant_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvariant_qualifier" ):
                return visitor.visitInvariant_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def invariant_qualifier(self):

        localctx = GLSLParser.Invariant_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_invariant_qualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.match(GLSLParser.INVARIANT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interpolation_qualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SMOOTH(self):
            return self.getToken(GLSLParser.SMOOTH, 0)

        def FLAT(self):
            return self.getToken(GLSLParser.FLAT, 0)

        def NOPERSPECTIVE(self):
            return self.getToken(GLSLParser.NOPERSPECTIVE, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_interpolation_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolation_qualifier" ):
                listener.enterInterpolation_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolation_qualifier" ):
                listener.exitInterpolation_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterpolation_qualifier" ):
                return visitor.visitInterpolation_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def interpolation_qualifier(self):

        localctx = GLSLParser.Interpolation_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_interpolation_qualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            _la = self._input.LA(1)
            if not(_la==35 or _la==108 or _la==138):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Layout_qualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAYOUT(self):
            return self.getToken(GLSLParser.LAYOUT, 0)

        def LEFT_PAREN(self):
            return self.getToken(GLSLParser.LEFT_PAREN, 0)

        def layout_qualifier_id_list(self):
            return self.getTypedRuleContext(GLSLParser.Layout_qualifier_id_listContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GLSLParser.RIGHT_PAREN, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_layout_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLayout_qualifier" ):
                listener.enterLayout_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLayout_qualifier" ):
                listener.exitLayout_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLayout_qualifier" ):
                return visitor.visitLayout_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def layout_qualifier(self):

        localctx = GLSLParser.Layout_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_layout_qualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.match(GLSLParser.LAYOUT)
            self.state = 408
            self.match(GLSLParser.LEFT_PAREN)
            self.state = 409
            self.layout_qualifier_id_list()
            self.state = 410
            self.match(GLSLParser.RIGHT_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Layout_qualifier_id_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def layout_qualifier_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GLSLParser.Layout_qualifier_idContext)
            else:
                return self.getTypedRuleContext(GLSLParser.Layout_qualifier_idContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GLSLParser.COMMA)
            else:
                return self.getToken(GLSLParser.COMMA, i)

        def getRuleIndex(self):
            return GLSLParser.RULE_layout_qualifier_id_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLayout_qualifier_id_list" ):
                listener.enterLayout_qualifier_id_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLayout_qualifier_id_list" ):
                listener.exitLayout_qualifier_id_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLayout_qualifier_id_list" ):
                return visitor.visitLayout_qualifier_id_list(self)
            else:
                return visitor.visitChildren(self)




    def layout_qualifier_id_list(self):

        localctx = GLSLParser.Layout_qualifier_id_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_layout_qualifier_id_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.layout_qualifier_id()
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==211:
                self.state = 413
                self.match(GLSLParser.COMMA)
                self.state = 414
                self.layout_qualifier_id()
                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Layout_qualifier_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GLSLParser.IDENTIFIER, 0)

        def EQUAL(self):
            return self.getToken(GLSLParser.EQUAL, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(GLSLParser.Constant_expressionContext,0)


        def SHARED(self):
            return self.getToken(GLSLParser.SHARED, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_layout_qualifier_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLayout_qualifier_id" ):
                listener.enterLayout_qualifier_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLayout_qualifier_id" ):
                listener.exitLayout_qualifier_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLayout_qualifier_id" ):
                return visitor.visitLayout_qualifier_id(self)
            else:
                return visitor.visitChildren(self)




    def layout_qualifier_id(self):

        localctx = GLSLParser.Layout_qualifier_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_layout_qualifier_id)
        self._la = 0 # Token type
        try:
            self.state = 426
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [257]:
                self.enterOuterAlt(localctx, 1)
                self.state = 420
                self.match(GLSLParser.IDENTIFIER)
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==217:
                    self.state = 421
                    self.match(GLSLParser.EQUAL)
                    self.state = 422
                    self.constant_expression()


                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 2)
                self.state = 425
                self.match(GLSLParser.SHARED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precise_qualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRECISE(self):
            return self.getToken(GLSLParser.PRECISE, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_precise_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecise_qualifier" ):
                listener.enterPrecise_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecise_qualifier" ):
                listener.exitPrecise_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecise_qualifier" ):
                return visitor.visitPrecise_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def precise_qualifier(self):

        localctx = GLSLParser.Precise_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_precise_qualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.match(GLSLParser.PRECISE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_qualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_type_qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GLSLParser.Single_type_qualifierContext)
            else:
                return self.getTypedRuleContext(GLSLParser.Single_type_qualifierContext,i)


        def getRuleIndex(self):
            return GLSLParser.RULE_type_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_qualifier" ):
                listener.enterType_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_qualifier" ):
                listener.exitType_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_qualifier" ):
                return visitor.visitType_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def type_qualifier(self):

        localctx = GLSLParser.Type_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_type_qualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 430
                self.single_type_qualifier()
                self.state = 433 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 2)) & ~0x3f) == 0 and ((1 << (_la - 2)) & -5764607445724821751) != 0) or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 615726523596803) != 0) or ((((_la - 168)) & ~0x3f) == 0 and ((1 << (_la - 168)) & 43218108417) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_type_qualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storage_qualifier(self):
            return self.getTypedRuleContext(GLSLParser.Storage_qualifierContext,0)


        def layout_qualifier(self):
            return self.getTypedRuleContext(GLSLParser.Layout_qualifierContext,0)


        def precision_qualifier(self):
            return self.getTypedRuleContext(GLSLParser.Precision_qualifierContext,0)


        def interpolation_qualifier(self):
            return self.getTypedRuleContext(GLSLParser.Interpolation_qualifierContext,0)


        def invariant_qualifier(self):
            return self.getTypedRuleContext(GLSLParser.Invariant_qualifierContext,0)


        def precise_qualifier(self):
            return self.getTypedRuleContext(GLSLParser.Precise_qualifierContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_single_type_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_type_qualifier" ):
                listener.enterSingle_type_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_type_qualifier" ):
                listener.exitSingle_type_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_type_qualifier" ):
                return visitor.visitSingle_type_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def single_type_qualifier(self):

        localctx = GLSLParser.Single_type_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_single_type_qualifier)
        try:
            self.state = 441
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 5, 10, 11, 12, 62, 63, 109, 110, 113, 114, 116, 137, 142, 168, 196, 201, 203]:
                self.enterOuterAlt(localctx, 1)
                self.state = 435
                self.storage_qualifier()
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 2)
                self.state = 436
                self.layout_qualifier()
                pass
            elif token in [38, 94, 107]:
                self.enterOuterAlt(localctx, 3)
                self.state = 437
                self.precision_qualifier()
                pass
            elif token in [35, 108, 138]:
                self.enterOuterAlt(localctx, 4)
                self.state = 438
                self.interpolation_qualifier()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 5)
                self.state = 439
                self.invariant_qualifier()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 6)
                self.state = 440
                self.precise_qualifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Storage_qualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(GLSLParser.CONST, 0)

        def IN(self):
            return self.getToken(GLSLParser.IN, 0)

        def OUT(self):
            return self.getToken(GLSLParser.OUT, 0)

        def INOUT(self):
            return self.getToken(GLSLParser.INOUT, 0)

        def CENTROID(self):
            return self.getToken(GLSLParser.CENTROID, 0)

        def PATCH(self):
            return self.getToken(GLSLParser.PATCH, 0)

        def SAMPLE(self):
            return self.getToken(GLSLParser.SAMPLE, 0)

        def UNIFORM(self):
            return self.getToken(GLSLParser.UNIFORM, 0)

        def BUFFER(self):
            return self.getToken(GLSLParser.BUFFER, 0)

        def SHARED(self):
            return self.getToken(GLSLParser.SHARED, 0)

        def COHERENT(self):
            return self.getToken(GLSLParser.COHERENT, 0)

        def VOLATILE(self):
            return self.getToken(GLSLParser.VOLATILE, 0)

        def RESTRICT(self):
            return self.getToken(GLSLParser.RESTRICT, 0)

        def READONLY(self):
            return self.getToken(GLSLParser.READONLY, 0)

        def WRITEONLY(self):
            return self.getToken(GLSLParser.WRITEONLY, 0)

        def SUBROUTINE(self):
            return self.getToken(GLSLParser.SUBROUTINE, 0)

        def LEFT_PAREN(self):
            return self.getToken(GLSLParser.LEFT_PAREN, 0)

        def type_name_list(self):
            return self.getTypedRuleContext(GLSLParser.Type_name_listContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GLSLParser.RIGHT_PAREN, 0)

        def ATTRIBUTE(self):
            return self.getToken(GLSLParser.ATTRIBUTE, 0)

        def VARYING(self):
            return self.getToken(GLSLParser.VARYING, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_storage_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorage_qualifier" ):
                listener.enterStorage_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorage_qualifier" ):
                listener.exitStorage_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorage_qualifier" ):
                return visitor.visitStorage_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def storage_qualifier(self):

        localctx = GLSLParser.Storage_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_storage_qualifier)
        self._la = 0 # Token type
        try:
            self.state = 467
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 443
                self.match(GLSLParser.CONST)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 444
                self.match(GLSLParser.IN)
                pass
            elif token in [109]:
                self.enterOuterAlt(localctx, 3)
                self.state = 445
                self.match(GLSLParser.OUT)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 4)
                self.state = 446
                self.match(GLSLParser.INOUT)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 5)
                self.state = 447
                self.match(GLSLParser.CENTROID)
                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 6)
                self.state = 448
                self.match(GLSLParser.PATCH)
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 7)
                self.state = 449
                self.match(GLSLParser.SAMPLE)
                pass
            elif token in [168]:
                self.enterOuterAlt(localctx, 8)
                self.state = 450
                self.match(GLSLParser.UNIFORM)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 9)
                self.state = 451
                self.match(GLSLParser.BUFFER)
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 10)
                self.state = 452
                self.match(GLSLParser.SHARED)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 11)
                self.state = 453
                self.match(GLSLParser.COHERENT)
                pass
            elif token in [201]:
                self.enterOuterAlt(localctx, 12)
                self.state = 454
                self.match(GLSLParser.VOLATILE)
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 13)
                self.state = 455
                self.match(GLSLParser.RESTRICT)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 14)
                self.state = 456
                self.match(GLSLParser.READONLY)
                pass
            elif token in [203]:
                self.enterOuterAlt(localctx, 15)
                self.state = 457
                self.match(GLSLParser.WRITEONLY)
                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 16)
                self.state = 458
                self.match(GLSLParser.SUBROUTINE)
                self.state = 463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==226:
                    self.state = 459
                    self.match(GLSLParser.LEFT_PAREN)
                    self.state = 460
                    self.type_name_list()
                    self.state = 461
                    self.match(GLSLParser.RIGHT_PAREN)


                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 17)
                self.state = 465
                self.match(GLSLParser.ATTRIBUTE)
                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 18)
                self.state = 466
                self.match(GLSLParser.VARYING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GLSLParser.Type_nameContext)
            else:
                return self.getTypedRuleContext(GLSLParser.Type_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GLSLParser.COMMA)
            else:
                return self.getToken(GLSLParser.COMMA, i)

        def getRuleIndex(self):
            return GLSLParser.RULE_type_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name_list" ):
                listener.enterType_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name_list" ):
                listener.exitType_name_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name_list" ):
                return visitor.visitType_name_list(self)
            else:
                return visitor.visitChildren(self)




    def type_name_list(self):

        localctx = GLSLParser.Type_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_type_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.type_name()
            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==211:
                self.state = 470
                self.match(GLSLParser.COMMA)
                self.state = 471
                self.type_name()
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GLSLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name" ):
                return visitor.visitType_name(self)
            else:
                return visitor.visitChildren(self)




    def type_name(self):

        localctx = GLSLParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.match(GLSLParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_specifier_nonarray(self):
            return self.getTypedRuleContext(GLSLParser.Type_specifier_nonarrayContext,0)


        def array_specifier(self):
            return self.getTypedRuleContext(GLSLParser.Array_specifierContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_type_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_specifier" ):
                listener.enterType_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_specifier" ):
                listener.exitType_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_specifier" ):
                return visitor.visitType_specifier(self)
            else:
                return visitor.visitChildren(self)




    def type_specifier(self):

        localctx = GLSLParser.Type_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_type_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.type_specifier_nonarray()
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224:
                self.state = 480
                self.array_specifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dimension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GLSLParser.DimensionContext)
            else:
                return self.getTypedRuleContext(GLSLParser.DimensionContext,i)


        def getRuleIndex(self):
            return GLSLParser.RULE_array_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_specifier" ):
                listener.enterArray_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_specifier" ):
                listener.exitArray_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_specifier" ):
                return visitor.visitArray_specifier(self)
            else:
                return visitor.visitChildren(self)




    def array_specifier(self):

        localctx = GLSLParser.Array_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_array_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 483
                self.dimension()
                self.state = 486 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==224):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACKET(self):
            return self.getToken(GLSLParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(GLSLParser.RIGHT_BRACKET, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(GLSLParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_dimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimension" ):
                listener.enterDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimension" ):
                listener.exitDimension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDimension" ):
                return visitor.visitDimension(self)
            else:
                return visitor.visitChildren(self)




    def dimension(self):

        localctx = GLSLParser.DimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_dimension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.match(GLSLParser.LEFT_BRACKET)
            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -6917529530286505755) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -4501401023543297) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & -9222246411859393985) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -8138003422817533829) != 0):
                self.state = 489
                self.constant_expression()


            self.state = 492
            self.match(GLSLParser.RIGHT_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_specifier_nonarrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VOID(self):
            return self.getToken(GLSLParser.VOID, 0)

        def FLOAT(self):
            return self.getToken(GLSLParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(GLSLParser.DOUBLE, 0)

        def INT(self):
            return self.getToken(GLSLParser.INT, 0)

        def UINT(self):
            return self.getToken(GLSLParser.UINT, 0)

        def BOOL(self):
            return self.getToken(GLSLParser.BOOL, 0)

        def VEC2(self):
            return self.getToken(GLSLParser.VEC2, 0)

        def VEC3(self):
            return self.getToken(GLSLParser.VEC3, 0)

        def VEC4(self):
            return self.getToken(GLSLParser.VEC4, 0)

        def DVEC2(self):
            return self.getToken(GLSLParser.DVEC2, 0)

        def DVEC3(self):
            return self.getToken(GLSLParser.DVEC3, 0)

        def DVEC4(self):
            return self.getToken(GLSLParser.DVEC4, 0)

        def BVEC2(self):
            return self.getToken(GLSLParser.BVEC2, 0)

        def BVEC3(self):
            return self.getToken(GLSLParser.BVEC3, 0)

        def BVEC4(self):
            return self.getToken(GLSLParser.BVEC4, 0)

        def IVEC2(self):
            return self.getToken(GLSLParser.IVEC2, 0)

        def IVEC3(self):
            return self.getToken(GLSLParser.IVEC3, 0)

        def IVEC4(self):
            return self.getToken(GLSLParser.IVEC4, 0)

        def UVEC2(self):
            return self.getToken(GLSLParser.UVEC2, 0)

        def UVEC3(self):
            return self.getToken(GLSLParser.UVEC3, 0)

        def UVEC4(self):
            return self.getToken(GLSLParser.UVEC4, 0)

        def MAT2(self):
            return self.getToken(GLSLParser.MAT2, 0)

        def MAT3(self):
            return self.getToken(GLSLParser.MAT3, 0)

        def MAT4(self):
            return self.getToken(GLSLParser.MAT4, 0)

        def MAT2X2(self):
            return self.getToken(GLSLParser.MAT2X2, 0)

        def MAT2X3(self):
            return self.getToken(GLSLParser.MAT2X3, 0)

        def MAT2X4(self):
            return self.getToken(GLSLParser.MAT2X4, 0)

        def MAT3X2(self):
            return self.getToken(GLSLParser.MAT3X2, 0)

        def MAT3X3(self):
            return self.getToken(GLSLParser.MAT3X3, 0)

        def MAT3X4(self):
            return self.getToken(GLSLParser.MAT3X4, 0)

        def MAT4X2(self):
            return self.getToken(GLSLParser.MAT4X2, 0)

        def MAT4X3(self):
            return self.getToken(GLSLParser.MAT4X3, 0)

        def MAT4X4(self):
            return self.getToken(GLSLParser.MAT4X4, 0)

        def DMAT2(self):
            return self.getToken(GLSLParser.DMAT2, 0)

        def DMAT3(self):
            return self.getToken(GLSLParser.DMAT3, 0)

        def DMAT4(self):
            return self.getToken(GLSLParser.DMAT4, 0)

        def DMAT2X2(self):
            return self.getToken(GLSLParser.DMAT2X2, 0)

        def DMAT2X3(self):
            return self.getToken(GLSLParser.DMAT2X3, 0)

        def DMAT2X4(self):
            return self.getToken(GLSLParser.DMAT2X4, 0)

        def DMAT3X2(self):
            return self.getToken(GLSLParser.DMAT3X2, 0)

        def DMAT3X3(self):
            return self.getToken(GLSLParser.DMAT3X3, 0)

        def DMAT3X4(self):
            return self.getToken(GLSLParser.DMAT3X4, 0)

        def DMAT4X2(self):
            return self.getToken(GLSLParser.DMAT4X2, 0)

        def DMAT4X3(self):
            return self.getToken(GLSLParser.DMAT4X3, 0)

        def DMAT4X4(self):
            return self.getToken(GLSLParser.DMAT4X4, 0)

        def ATOMIC_UINT(self):
            return self.getToken(GLSLParser.ATOMIC_UINT, 0)

        def SAMPLER2D(self):
            return self.getToken(GLSLParser.SAMPLER2D, 0)

        def SAMPLER3D(self):
            return self.getToken(GLSLParser.SAMPLER3D, 0)

        def SAMPLERCUBE(self):
            return self.getToken(GLSLParser.SAMPLERCUBE, 0)

        def SAMPLER2DSHADOW(self):
            return self.getToken(GLSLParser.SAMPLER2DSHADOW, 0)

        def SAMPLERCUBESHADOW(self):
            return self.getToken(GLSLParser.SAMPLERCUBESHADOW, 0)

        def SAMPLER2DARRAY(self):
            return self.getToken(GLSLParser.SAMPLER2DARRAY, 0)

        def SAMPLER2DARRAYSHADOW(self):
            return self.getToken(GLSLParser.SAMPLER2DARRAYSHADOW, 0)

        def SAMPLERCUBEARRAY(self):
            return self.getToken(GLSLParser.SAMPLERCUBEARRAY, 0)

        def SAMPLERCUBEARRAYSHADOW(self):
            return self.getToken(GLSLParser.SAMPLERCUBEARRAYSHADOW, 0)

        def ISAMPLER2D(self):
            return self.getToken(GLSLParser.ISAMPLER2D, 0)

        def ISAMPLER3D(self):
            return self.getToken(GLSLParser.ISAMPLER3D, 0)

        def ISAMPLERCUBE(self):
            return self.getToken(GLSLParser.ISAMPLERCUBE, 0)

        def ISAMPLER2DARRAY(self):
            return self.getToken(GLSLParser.ISAMPLER2DARRAY, 0)

        def ISAMPLERCUBEARRAY(self):
            return self.getToken(GLSLParser.ISAMPLERCUBEARRAY, 0)

        def USAMPLER2D(self):
            return self.getToken(GLSLParser.USAMPLER2D, 0)

        def USAMPLER3D(self):
            return self.getToken(GLSLParser.USAMPLER3D, 0)

        def USAMPLERCUBE(self):
            return self.getToken(GLSLParser.USAMPLERCUBE, 0)

        def USAMPLER2DARRAY(self):
            return self.getToken(GLSLParser.USAMPLER2DARRAY, 0)

        def USAMPLERCUBEARRAY(self):
            return self.getToken(GLSLParser.USAMPLERCUBEARRAY, 0)

        def SAMPLER1D(self):
            return self.getToken(GLSLParser.SAMPLER1D, 0)

        def SAMPLER1DSHADOW(self):
            return self.getToken(GLSLParser.SAMPLER1DSHADOW, 0)

        def SAMPLER1DARRAY(self):
            return self.getToken(GLSLParser.SAMPLER1DARRAY, 0)

        def SAMPLER1DARRAYSHADOW(self):
            return self.getToken(GLSLParser.SAMPLER1DARRAYSHADOW, 0)

        def ISAMPLER1D(self):
            return self.getToken(GLSLParser.ISAMPLER1D, 0)

        def ISAMPLER1DARRAY(self):
            return self.getToken(GLSLParser.ISAMPLER1DARRAY, 0)

        def USAMPLER1D(self):
            return self.getToken(GLSLParser.USAMPLER1D, 0)

        def USAMPLER1DARRAY(self):
            return self.getToken(GLSLParser.USAMPLER1DARRAY, 0)

        def SAMPLER2DRECT(self):
            return self.getToken(GLSLParser.SAMPLER2DRECT, 0)

        def SAMPLER2DRECTSHADOW(self):
            return self.getToken(GLSLParser.SAMPLER2DRECTSHADOW, 0)

        def ISAMPLER2DRECT(self):
            return self.getToken(GLSLParser.ISAMPLER2DRECT, 0)

        def USAMPLER2DRECT(self):
            return self.getToken(GLSLParser.USAMPLER2DRECT, 0)

        def SAMPLERBUFFER(self):
            return self.getToken(GLSLParser.SAMPLERBUFFER, 0)

        def ISAMPLERBUFFER(self):
            return self.getToken(GLSLParser.ISAMPLERBUFFER, 0)

        def USAMPLERBUFFER(self):
            return self.getToken(GLSLParser.USAMPLERBUFFER, 0)

        def SAMPLER2DMS(self):
            return self.getToken(GLSLParser.SAMPLER2DMS, 0)

        def ISAMPLER2DMS(self):
            return self.getToken(GLSLParser.ISAMPLER2DMS, 0)

        def USAMPLER2DMS(self):
            return self.getToken(GLSLParser.USAMPLER2DMS, 0)

        def SAMPLER2DMSARRAY(self):
            return self.getToken(GLSLParser.SAMPLER2DMSARRAY, 0)

        def ISAMPLER2DMSARRAY(self):
            return self.getToken(GLSLParser.ISAMPLER2DMSARRAY, 0)

        def USAMPLER2DMSARRAY(self):
            return self.getToken(GLSLParser.USAMPLER2DMSARRAY, 0)

        def IMAGE2D(self):
            return self.getToken(GLSLParser.IMAGE2D, 0)

        def IIMAGE2D(self):
            return self.getToken(GLSLParser.IIMAGE2D, 0)

        def UIMAGE2D(self):
            return self.getToken(GLSLParser.UIMAGE2D, 0)

        def IMAGE3D(self):
            return self.getToken(GLSLParser.IMAGE3D, 0)

        def IIMAGE3D(self):
            return self.getToken(GLSLParser.IIMAGE3D, 0)

        def UIMAGE3D(self):
            return self.getToken(GLSLParser.UIMAGE3D, 0)

        def IMAGECUBE(self):
            return self.getToken(GLSLParser.IMAGECUBE, 0)

        def IIMAGECUBE(self):
            return self.getToken(GLSLParser.IIMAGECUBE, 0)

        def UIMAGECUBE(self):
            return self.getToken(GLSLParser.UIMAGECUBE, 0)

        def IMAGEBUFFER(self):
            return self.getToken(GLSLParser.IMAGEBUFFER, 0)

        def IIMAGEBUFFER(self):
            return self.getToken(GLSLParser.IIMAGEBUFFER, 0)

        def UIMAGEBUFFER(self):
            return self.getToken(GLSLParser.UIMAGEBUFFER, 0)

        def IMAGE1D(self):
            return self.getToken(GLSLParser.IMAGE1D, 0)

        def IIMAGE1D(self):
            return self.getToken(GLSLParser.IIMAGE1D, 0)

        def UIMAGE1D(self):
            return self.getToken(GLSLParser.UIMAGE1D, 0)

        def IMAGE1DARRAY(self):
            return self.getToken(GLSLParser.IMAGE1DARRAY, 0)

        def IIMAGE1DARRAY(self):
            return self.getToken(GLSLParser.IIMAGE1DARRAY, 0)

        def UIMAGE1DARRAY(self):
            return self.getToken(GLSLParser.UIMAGE1DARRAY, 0)

        def IMAGE2DRECT(self):
            return self.getToken(GLSLParser.IMAGE2DRECT, 0)

        def IIMAGE2DRECT(self):
            return self.getToken(GLSLParser.IIMAGE2DRECT, 0)

        def UIMAGE2DRECT(self):
            return self.getToken(GLSLParser.UIMAGE2DRECT, 0)

        def IMAGE2DARRAY(self):
            return self.getToken(GLSLParser.IMAGE2DARRAY, 0)

        def IIMAGE2DARRAY(self):
            return self.getToken(GLSLParser.IIMAGE2DARRAY, 0)

        def UIMAGE2DARRAY(self):
            return self.getToken(GLSLParser.UIMAGE2DARRAY, 0)

        def IMAGECUBEARRAY(self):
            return self.getToken(GLSLParser.IMAGECUBEARRAY, 0)

        def IIMAGECUBEARRAY(self):
            return self.getToken(GLSLParser.IIMAGECUBEARRAY, 0)

        def UIMAGECUBEARRAY(self):
            return self.getToken(GLSLParser.UIMAGECUBEARRAY, 0)

        def IMAGE2DMS(self):
            return self.getToken(GLSLParser.IMAGE2DMS, 0)

        def IIMAGE2DMS(self):
            return self.getToken(GLSLParser.IIMAGE2DMS, 0)

        def UIMAGE2DMS(self):
            return self.getToken(GLSLParser.UIMAGE2DMS, 0)

        def IMAGE2DMSARRAY(self):
            return self.getToken(GLSLParser.IMAGE2DMSARRAY, 0)

        def IIMAGE2DMSARRAY(self):
            return self.getToken(GLSLParser.IIMAGE2DMSARRAY, 0)

        def UIMAGE2DMSARRAY(self):
            return self.getToken(GLSLParser.UIMAGE2DMSARRAY, 0)

        def struct_specifier(self):
            return self.getTypedRuleContext(GLSLParser.Struct_specifierContext,0)


        def type_name(self):
            return self.getTypedRuleContext(GLSLParser.Type_nameContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_type_specifier_nonarray

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_specifier_nonarray" ):
                listener.enterType_specifier_nonarray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_specifier_nonarray" ):
                listener.exitType_specifier_nonarray(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_specifier_nonarray" ):
                return visitor.visitType_specifier_nonarray(self)
            else:
                return visitor.visitChildren(self)




    def type_specifier_nonarray(self):

        localctx = GLSLParser.Type_specifier_nonarrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_type_specifier_nonarray)
        try:
            self.state = 615
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [200]:
                self.enterOuterAlt(localctx, 1)
                self.state = 494
                self.match(GLSLParser.VOID)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                self.match(GLSLParser.FLOAT)
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 3)
                self.state = 496
                self.match(GLSLParser.DOUBLE)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 4)
                self.state = 497
                self.match(GLSLParser.INT)
                pass
            elif token in [167]:
                self.enterOuterAlt(localctx, 5)
                self.state = 498
                self.match(GLSLParser.UINT)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 6)
                self.state = 499
                self.match(GLSLParser.BOOL)
                pass
            elif token in [197]:
                self.enterOuterAlt(localctx, 7)
                self.state = 500
                self.match(GLSLParser.VEC2)
                pass
            elif token in [198]:
                self.enterOuterAlt(localctx, 8)
                self.state = 501
                self.match(GLSLParser.VEC3)
                pass
            elif token in [199]:
                self.enterOuterAlt(localctx, 9)
                self.state = 502
                self.match(GLSLParser.VEC4)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 10)
                self.state = 503
                self.match(GLSLParser.DVEC2)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 11)
                self.state = 504
                self.match(GLSLParser.DVEC3)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 12)
                self.state = 505
                self.match(GLSLParser.DVEC4)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 13)
                self.state = 506
                self.match(GLSLParser.BVEC2)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 14)
                self.state = 507
                self.match(GLSLParser.BVEC3)
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 15)
                self.state = 508
                self.match(GLSLParser.BVEC4)
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 16)
                self.state = 509
                self.match(GLSLParser.IVEC2)
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 17)
                self.state = 510
                self.match(GLSLParser.IVEC3)
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 18)
                self.state = 511
                self.match(GLSLParser.IVEC4)
                pass
            elif token in [193]:
                self.enterOuterAlt(localctx, 19)
                self.state = 512
                self.match(GLSLParser.UVEC2)
                pass
            elif token in [194]:
                self.enterOuterAlt(localctx, 20)
                self.state = 513
                self.match(GLSLParser.UVEC3)
                pass
            elif token in [195]:
                self.enterOuterAlt(localctx, 21)
                self.state = 514
                self.match(GLSLParser.UVEC4)
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 22)
                self.state = 515
                self.match(GLSLParser.MAT2)
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 23)
                self.state = 516
                self.match(GLSLParser.MAT3)
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 24)
                self.state = 517
                self.match(GLSLParser.MAT4)
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 25)
                self.state = 518
                self.match(GLSLParser.MAT2X2)
                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 26)
                self.state = 519
                self.match(GLSLParser.MAT2X3)
                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 27)
                self.state = 520
                self.match(GLSLParser.MAT2X4)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 28)
                self.state = 521
                self.match(GLSLParser.MAT3X2)
                pass
            elif token in [101]:
                self.enterOuterAlt(localctx, 29)
                self.state = 522
                self.match(GLSLParser.MAT3X3)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 30)
                self.state = 523
                self.match(GLSLParser.MAT3X4)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 31)
                self.state = 524
                self.match(GLSLParser.MAT4X2)
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 32)
                self.state = 525
                self.match(GLSLParser.MAT4X3)
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 33)
                self.state = 526
                self.match(GLSLParser.MAT4X4)
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 34)
                self.state = 527
                self.match(GLSLParser.DMAT2)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 35)
                self.state = 528
                self.match(GLSLParser.DMAT3)
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 36)
                self.state = 529
                self.match(GLSLParser.DMAT4)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 37)
                self.state = 530
                self.match(GLSLParser.DMAT2X2)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 38)
                self.state = 531
                self.match(GLSLParser.DMAT2X3)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 39)
                self.state = 532
                self.match(GLSLParser.DMAT2X4)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 40)
                self.state = 533
                self.match(GLSLParser.DMAT3X2)
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 41)
                self.state = 534
                self.match(GLSLParser.DMAT3X3)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 42)
                self.state = 535
                self.match(GLSLParser.DMAT3X4)
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 43)
                self.state = 536
                self.match(GLSLParser.DMAT4X2)
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 44)
                self.state = 537
                self.match(GLSLParser.DMAT4X3)
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 45)
                self.state = 538
                self.match(GLSLParser.DMAT4X4)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 46)
                self.state = 539
                self.match(GLSLParser.ATOMIC_UINT)
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 47)
                self.state = 540
                self.match(GLSLParser.SAMPLER2D)
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 48)
                self.state = 541
                self.match(GLSLParser.SAMPLER3D)
                pass
            elif token in [132]:
                self.enterOuterAlt(localctx, 49)
                self.state = 542
                self.match(GLSLParser.SAMPLERCUBE)
                pass
            elif token in [129]:
                self.enterOuterAlt(localctx, 50)
                self.state = 543
                self.match(GLSLParser.SAMPLER2DSHADOW)
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 51)
                self.state = 544
                self.match(GLSLParser.SAMPLERCUBESHADOW)
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 52)
                self.state = 545
                self.match(GLSLParser.SAMPLER2DARRAY)
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 53)
                self.state = 546
                self.match(GLSLParser.SAMPLER2DARRAYSHADOW)
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 54)
                self.state = 547
                self.match(GLSLParser.SAMPLERCUBEARRAY)
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 55)
                self.state = 548
                self.match(GLSLParser.SAMPLERCUBEARRAYSHADOW)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 56)
                self.state = 549
                self.match(GLSLParser.ISAMPLER2D)
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 57)
                self.state = 550
                self.match(GLSLParser.ISAMPLER3D)
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 58)
                self.state = 551
                self.match(GLSLParser.ISAMPLERCUBE)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 59)
                self.state = 552
                self.match(GLSLParser.ISAMPLER2DARRAY)
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 60)
                self.state = 553
                self.match(GLSLParser.ISAMPLERCUBEARRAY)
                pass
            elif token in [171]:
                self.enterOuterAlt(localctx, 61)
                self.state = 554
                self.match(GLSLParser.USAMPLER2D)
                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 62)
                self.state = 555
                self.match(GLSLParser.USAMPLER3D)
                pass
            elif token in [178]:
                self.enterOuterAlt(localctx, 63)
                self.state = 556
                self.match(GLSLParser.USAMPLERCUBE)
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 64)
                self.state = 557
                self.match(GLSLParser.USAMPLER2DARRAY)
                pass
            elif token in [179]:
                self.enterOuterAlt(localctx, 65)
                self.state = 558
                self.match(GLSLParser.USAMPLERCUBEARRAY)
                pass
            elif token in [118]:
                self.enterOuterAlt(localctx, 66)
                self.state = 559
                self.match(GLSLParser.SAMPLER1D)
                pass
            elif token in [121]:
                self.enterOuterAlt(localctx, 67)
                self.state = 560
                self.match(GLSLParser.SAMPLER1DSHADOW)
                pass
            elif token in [119]:
                self.enterOuterAlt(localctx, 68)
                self.state = 561
                self.match(GLSLParser.SAMPLER1DARRAY)
                pass
            elif token in [120]:
                self.enterOuterAlt(localctx, 69)
                self.state = 562
                self.match(GLSLParser.SAMPLER1DARRAYSHADOW)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 70)
                self.state = 563
                self.match(GLSLParser.ISAMPLER1D)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 71)
                self.state = 564
                self.match(GLSLParser.ISAMPLER1DARRAY)
                pass
            elif token in [169]:
                self.enterOuterAlt(localctx, 72)
                self.state = 565
                self.match(GLSLParser.USAMPLER1D)
                pass
            elif token in [170]:
                self.enterOuterAlt(localctx, 73)
                self.state = 566
                self.match(GLSLParser.USAMPLER1DARRAY)
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 74)
                self.state = 567
                self.match(GLSLParser.SAMPLER2DRECT)
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 75)
                self.state = 568
                self.match(GLSLParser.SAMPLER2DRECTSHADOW)
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 76)
                self.state = 569
                self.match(GLSLParser.ISAMPLER2DRECT)
                pass
            elif token in [175]:
                self.enterOuterAlt(localctx, 77)
                self.state = 570
                self.match(GLSLParser.USAMPLER2DRECT)
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 78)
                self.state = 571
                self.match(GLSLParser.SAMPLERBUFFER)
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 79)
                self.state = 572
                self.match(GLSLParser.ISAMPLERBUFFER)
                pass
            elif token in [177]:
                self.enterOuterAlt(localctx, 80)
                self.state = 573
                self.match(GLSLParser.USAMPLERBUFFER)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 81)
                self.state = 574
                self.match(GLSLParser.SAMPLER2DMS)
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 82)
                self.state = 575
                self.match(GLSLParser.ISAMPLER2DMS)
                pass
            elif token in [173]:
                self.enterOuterAlt(localctx, 83)
                self.state = 576
                self.match(GLSLParser.USAMPLER2DMS)
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 84)
                self.state = 577
                self.match(GLSLParser.SAMPLER2DMSARRAY)
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 85)
                self.state = 578
                self.match(GLSLParser.ISAMPLER2DMSARRAY)
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 86)
                self.state = 579
                self.match(GLSLParser.USAMPLER2DMSARRAY)
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 87)
                self.state = 580
                self.match(GLSLParser.IMAGE2D)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 88)
                self.state = 581
                self.match(GLSLParser.IIMAGE2D)
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 89)
                self.state = 582
                self.match(GLSLParser.UIMAGE2D)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 90)
                self.state = 583
                self.match(GLSLParser.IMAGE3D)
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 91)
                self.state = 584
                self.match(GLSLParser.IIMAGE3D)
                pass
            elif token in [163]:
                self.enterOuterAlt(localctx, 92)
                self.state = 585
                self.match(GLSLParser.UIMAGE3D)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 93)
                self.state = 586
                self.match(GLSLParser.IMAGECUBE)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 94)
                self.state = 587
                self.match(GLSLParser.IIMAGECUBE)
                pass
            elif token in [165]:
                self.enterOuterAlt(localctx, 95)
                self.state = 588
                self.match(GLSLParser.UIMAGECUBE)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 96)
                self.state = 589
                self.match(GLSLParser.IMAGEBUFFER)
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 97)
                self.state = 590
                self.match(GLSLParser.IIMAGEBUFFER)
                pass
            elif token in [164]:
                self.enterOuterAlt(localctx, 98)
                self.state = 591
                self.match(GLSLParser.UIMAGEBUFFER)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 99)
                self.state = 592
                self.match(GLSLParser.IMAGE1D)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 100)
                self.state = 593
                self.match(GLSLParser.IIMAGE1D)
                pass
            elif token in [156]:
                self.enterOuterAlt(localctx, 101)
                self.state = 594
                self.match(GLSLParser.UIMAGE1D)
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 102)
                self.state = 595
                self.match(GLSLParser.IMAGE1DARRAY)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 103)
                self.state = 596
                self.match(GLSLParser.IIMAGE1DARRAY)
                pass
            elif token in [157]:
                self.enterOuterAlt(localctx, 104)
                self.state = 597
                self.match(GLSLParser.UIMAGE1DARRAY)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 105)
                self.state = 598
                self.match(GLSLParser.IMAGE2DRECT)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 106)
                self.state = 599
                self.match(GLSLParser.IIMAGE2DRECT)
                pass
            elif token in [162]:
                self.enterOuterAlt(localctx, 107)
                self.state = 600
                self.match(GLSLParser.UIMAGE2DRECT)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 108)
                self.state = 601
                self.match(GLSLParser.IMAGE2DARRAY)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 109)
                self.state = 602
                self.match(GLSLParser.IIMAGE2DARRAY)
                pass
            elif token in [159]:
                self.enterOuterAlt(localctx, 110)
                self.state = 603
                self.match(GLSLParser.UIMAGE2DARRAY)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 111)
                self.state = 604
                self.match(GLSLParser.IMAGECUBEARRAY)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 112)
                self.state = 605
                self.match(GLSLParser.IIMAGECUBEARRAY)
                pass
            elif token in [166]:
                self.enterOuterAlt(localctx, 113)
                self.state = 606
                self.match(GLSLParser.UIMAGECUBEARRAY)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 114)
                self.state = 607
                self.match(GLSLParser.IMAGE2DMS)
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 115)
                self.state = 608
                self.match(GLSLParser.IIMAGE2DMS)
                pass
            elif token in [160]:
                self.enterOuterAlt(localctx, 116)
                self.state = 609
                self.match(GLSLParser.UIMAGE2DMS)
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 117)
                self.state = 610
                self.match(GLSLParser.IMAGE2DMSARRAY)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 118)
                self.state = 611
                self.match(GLSLParser.IIMAGE2DMSARRAY)
                pass
            elif token in [161]:
                self.enterOuterAlt(localctx, 119)
                self.state = 612
                self.match(GLSLParser.UIMAGE2DMSARRAY)
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 120)
                self.state = 613
                self.struct_specifier()
                pass
            elif token in [257]:
                self.enterOuterAlt(localctx, 121)
                self.state = 614
                self.type_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precision_qualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HIGHP(self):
            return self.getToken(GLSLParser.HIGHP, 0)

        def MEDIUMP(self):
            return self.getToken(GLSLParser.MEDIUMP, 0)

        def LOWP(self):
            return self.getToken(GLSLParser.LOWP, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_precision_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecision_qualifier" ):
                listener.enterPrecision_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecision_qualifier" ):
                listener.exitPrecision_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrecision_qualifier" ):
                return visitor.visitPrecision_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def precision_qualifier(self):

        localctx = GLSLParser.Precision_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_precision_qualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            _la = self._input.LA(1)
            if not(_la==38 or _la==94 or _la==107):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_specifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(GLSLParser.STRUCT, 0)

        def LEFT_BRACE(self):
            return self.getToken(GLSLParser.LEFT_BRACE, 0)

        def struct_declaration_list(self):
            return self.getTypedRuleContext(GLSLParser.Struct_declaration_listContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(GLSLParser.RIGHT_BRACE, 0)

        def IDENTIFIER(self):
            return self.getToken(GLSLParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_struct_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_specifier" ):
                listener.enterStruct_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_specifier" ):
                listener.exitStruct_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_specifier" ):
                return visitor.visitStruct_specifier(self)
            else:
                return visitor.visitChildren(self)




    def struct_specifier(self):

        localctx = GLSLParser.Struct_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_struct_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(GLSLParser.STRUCT)
            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==257:
                self.state = 620
                self.match(GLSLParser.IDENTIFIER)


            self.state = 623
            self.match(GLSLParser.LEFT_BRACE)
            self.state = 624
            self.struct_declaration_list()
            self.state = 625
            self.match(GLSLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_declaration_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GLSLParser.Struct_declarationContext)
            else:
                return self.getTypedRuleContext(GLSLParser.Struct_declarationContext,i)


        def getRuleIndex(self):
            return GLSLParser.RULE_struct_declaration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_declaration_list" ):
                listener.enterStruct_declaration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_declaration_list" ):
                listener.exitStruct_declaration_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_declaration_list" ):
                return visitor.visitStruct_declaration_list(self)
            else:
                return visitor.visitChildren(self)




    def struct_declaration_list(self):

        localctx = GLSLParser.Struct_declaration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_struct_declaration_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 627
                self.struct_declaration()
                self.state = 630 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -713233064466) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -11540474112237569) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4503599358955263) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 1535) != 0) or _la==257):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_specifier(self):
            return self.getTypedRuleContext(GLSLParser.Type_specifierContext,0)


        def struct_declarator_list(self):
            return self.getTypedRuleContext(GLSLParser.Struct_declarator_listContext,0)


        def SEMICOLON(self):
            return self.getToken(GLSLParser.SEMICOLON, 0)

        def type_qualifier(self):
            return self.getTypedRuleContext(GLSLParser.Type_qualifierContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_struct_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_declaration" ):
                listener.enterStruct_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_declaration" ):
                listener.exitStruct_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_declaration" ):
                return visitor.visitStruct_declaration(self)
            else:
                return visitor.visitChildren(self)




    def struct_declaration(self):

        localctx = GLSLParser.Struct_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_struct_declaration)
        try:
            self.state = 641
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 6, 7, 8, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 193, 194, 195, 197, 198, 199, 200, 257]:
                self.enterOuterAlt(localctx, 1)
                self.state = 632
                self.type_specifier()
                self.state = 633
                self.struct_declarator_list()
                self.state = 634
                self.match(GLSLParser.SEMICOLON)
                pass
            elif token in [2, 5, 10, 11, 12, 35, 38, 62, 63, 65, 93, 94, 107, 108, 109, 110, 111, 113, 114, 116, 137, 138, 142, 168, 196, 201, 203]:
                self.enterOuterAlt(localctx, 2)
                self.state = 636
                self.type_qualifier()
                self.state = 637
                self.type_specifier()
                self.state = 638
                self.struct_declarator_list()
                self.state = 639
                self.match(GLSLParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_declarator_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GLSLParser.Struct_declaratorContext)
            else:
                return self.getTypedRuleContext(GLSLParser.Struct_declaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GLSLParser.COMMA)
            else:
                return self.getToken(GLSLParser.COMMA, i)

        def getRuleIndex(self):
            return GLSLParser.RULE_struct_declarator_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_declarator_list" ):
                listener.enterStruct_declarator_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_declarator_list" ):
                listener.exitStruct_declarator_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_declarator_list" ):
                return visitor.visitStruct_declarator_list(self)
            else:
                return visitor.visitChildren(self)




    def struct_declarator_list(self):

        localctx = GLSLParser.Struct_declarator_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_struct_declarator_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.struct_declarator()
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==211:
                self.state = 644
                self.match(GLSLParser.COMMA)
                self.state = 645
                self.struct_declarator()
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GLSLParser.IDENTIFIER, 0)

        def array_specifier(self):
            return self.getTypedRuleContext(GLSLParser.Array_specifierContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_struct_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_declarator" ):
                listener.enterStruct_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_declarator" ):
                listener.exitStruct_declarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_declarator" ):
                return visitor.visitStruct_declarator(self)
            else:
                return visitor.visitChildren(self)




    def struct_declarator(self):

        localctx = GLSLParser.Struct_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_struct_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(GLSLParser.IDENTIFIER)
            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224:
                self.state = 652
                self.array_specifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment_expression(self):
            return self.getTypedRuleContext(GLSLParser.Assignment_expressionContext,0)


        def LEFT_BRACE(self):
            return self.getToken(GLSLParser.LEFT_BRACE, 0)

        def initializer_list(self):
            return self.getTypedRuleContext(GLSLParser.Initializer_listContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(GLSLParser.RIGHT_BRACE, 0)

        def COMMA(self):
            return self.getToken(GLSLParser.COMMA, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = GLSLParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_initializer)
        self._la = 0 # Token type
        try:
            self.state = 663
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 6, 7, 8, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 193, 194, 195, 197, 198, 199, 200, 208, 212, 213, 219, 226, 234, 246, 250, 251, 252, 253, 257]:
                self.enterOuterAlt(localctx, 1)
                self.state = 655
                self.assignment_expression()
                pass
            elif token in [223]:
                self.enterOuterAlt(localctx, 2)
                self.state = 656
                self.match(GLSLParser.LEFT_BRACE)
                self.state = 657
                self.initializer_list()
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 658
                    self.match(GLSLParser.COMMA)


                self.state = 661
                self.match(GLSLParser.RIGHT_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initializer_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GLSLParser.InitializerContext)
            else:
                return self.getTypedRuleContext(GLSLParser.InitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GLSLParser.COMMA)
            else:
                return self.getToken(GLSLParser.COMMA, i)

        def getRuleIndex(self):
            return GLSLParser.RULE_initializer_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer_list" ):
                listener.enterInitializer_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer_list" ):
                listener.exitInitializer_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer_list" ):
                return visitor.visitInitializer_list(self)
            else:
                return visitor.visitChildren(self)




    def initializer_list(self):

        localctx = GLSLParser.Initializer_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_initializer_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.initializer()
            self.state = 670
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 666
                    self.match(GLSLParser.COMMA)
                    self.state = 667
                    self.initializer() 
                self.state = 672
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Declaration_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(GLSLParser.DeclarationContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_declaration_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration_statement" ):
                listener.enterDeclaration_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration_statement" ):
                listener.exitDeclaration_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration_statement" ):
                return visitor.visitDeclaration_statement(self)
            else:
                return visitor.visitChildren(self)




    def declaration_statement(self):

        localctx = GLSLParser.Declaration_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_declaration_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_statement(self):
            return self.getTypedRuleContext(GLSLParser.Compound_statementContext,0)


        def simple_statement(self):
            return self.getTypedRuleContext(GLSLParser.Simple_statementContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = GLSLParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_statement)
        try:
            self.state = 677
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [223]:
                self.enterOuterAlt(localctx, 1)
                self.state = 675
                self.compound_statement()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 142, 143, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 208, 212, 213, 219, 226, 234, 242, 246, 250, 251, 252, 253, 257]:
                self.enterOuterAlt(localctx, 2)
                self.state = 676
                self.simple_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration_statement(self):
            return self.getTypedRuleContext(GLSLParser.Declaration_statementContext,0)


        def expression_statement(self):
            return self.getTypedRuleContext(GLSLParser.Expression_statementContext,0)


        def selection_statement(self):
            return self.getTypedRuleContext(GLSLParser.Selection_statementContext,0)


        def switch_statement(self):
            return self.getTypedRuleContext(GLSLParser.Switch_statementContext,0)


        def case_label(self):
            return self.getTypedRuleContext(GLSLParser.Case_labelContext,0)


        def iteration_statement(self):
            return self.getTypedRuleContext(GLSLParser.Iteration_statementContext,0)


        def jump_statement(self):
            return self.getTypedRuleContext(GLSLParser.Jump_statementContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_simple_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_statement" ):
                listener.enterSimple_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_statement" ):
                listener.exitSimple_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_statement" ):
                return visitor.visitSimple_statement(self)
            else:
                return visitor.visitChildren(self)




    def simple_statement(self):

        localctx = GLSLParser.Simple_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_simple_statement)
        try:
            self.state = 686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 679
                self.declaration_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 680
                self.expression_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 681
                self.selection_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 682
                self.switch_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 683
                self.case_label()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 684
                self.iteration_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 685
                self.jump_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GLSLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GLSLParser.RIGHT_BRACE, 0)

        def statement_list(self):
            return self.getTypedRuleContext(GLSLParser.Statement_listContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_compound_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_statement" ):
                listener.enterCompound_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_statement" ):
                listener.exitCompound_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_statement" ):
                return visitor.visitCompound_statement(self)
            else:
                return visitor.visitChildren(self)




    def compound_statement(self):

        localctx = GLSLParser.Compound_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_compound_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.match(GLSLParser.LEFT_BRACE)
            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8589934594) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9007199321841665) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4503599493205759) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 2171300179101648895) != 0) or _la==257:
                self.state = 689
                self.statement_list()


            self.state = 692
            self.match(GLSLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_no_new_scopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_statement_no_new_scope(self):
            return self.getTypedRuleContext(GLSLParser.Compound_statement_no_new_scopeContext,0)


        def simple_statement(self):
            return self.getTypedRuleContext(GLSLParser.Simple_statementContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_statement_no_new_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_no_new_scope" ):
                listener.enterStatement_no_new_scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_no_new_scope" ):
                listener.exitStatement_no_new_scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement_no_new_scope" ):
                return visitor.visitStatement_no_new_scope(self)
            else:
                return visitor.visitChildren(self)




    def statement_no_new_scope(self):

        localctx = GLSLParser.Statement_no_new_scopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_statement_no_new_scope)
        try:
            self.state = 696
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [223]:
                self.enterOuterAlt(localctx, 1)
                self.state = 694
                self.compound_statement_no_new_scope()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 142, 143, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 208, 212, 213, 219, 226, 234, 242, 246, 250, 251, 252, 253, 257]:
                self.enterOuterAlt(localctx, 2)
                self.state = 695
                self.simple_statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_statement_no_new_scopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(GLSLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GLSLParser.RIGHT_BRACE, 0)

        def statement_list(self):
            return self.getTypedRuleContext(GLSLParser.Statement_listContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_compound_statement_no_new_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_statement_no_new_scope" ):
                listener.enterCompound_statement_no_new_scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_statement_no_new_scope" ):
                listener.exitCompound_statement_no_new_scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_statement_no_new_scope" ):
                return visitor.visitCompound_statement_no_new_scope(self)
            else:
                return visitor.visitChildren(self)




    def compound_statement_no_new_scope(self):

        localctx = GLSLParser.Compound_statement_no_new_scopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_compound_statement_no_new_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(GLSLParser.LEFT_BRACE)
            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8589934594) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9007199321841665) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4503599493205759) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 2171300179101648895) != 0) or _la==257:
                self.state = 699
                self.statement_list()


            self.state = 702
            self.match(GLSLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GLSLParser.StatementContext)
            else:
                return self.getTypedRuleContext(GLSLParser.StatementContext,i)


        def getRuleIndex(self):
            return GLSLParser.RULE_statement_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_list" ):
                listener.enterStatement_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_list" ):
                listener.exitStatement_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement_list" ):
                return visitor.visitStatement_list(self)
            else:
                return visitor.visitChildren(self)




    def statement_list(self):

        localctx = GLSLParser.Statement_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_statement_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 704
                self.statement()
                self.state = 707 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -8589934594) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9007199321841665) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4503599493205759) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 2171300179101648895) != 0) or _la==257):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expression_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(GLSLParser.SEMICOLON, 0)

        def expression(self):
            return self.getTypedRuleContext(GLSLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_expression_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_statement" ):
                listener.enterExpression_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_statement" ):
                listener.exitExpression_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_statement" ):
                return visitor.visitExpression_statement(self)
            else:
                return visitor.visitChildren(self)




    def expression_statement(self):

        localctx = GLSLParser.Expression_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_expression_statement)
        try:
            self.state = 713
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [242]:
                self.enterOuterAlt(localctx, 1)
                self.state = 709
                self.match(GLSLParser.SEMICOLON)
                pass
            elif token in [1, 3, 6, 7, 8, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 139, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 193, 194, 195, 197, 198, 199, 200, 208, 212, 213, 219, 226, 234, 246, 250, 251, 252, 253, 257]:
                self.enterOuterAlt(localctx, 2)
                self.state = 710
                self.expression(0)
                self.state = 711
                self.match(GLSLParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(GLSLParser.IF, 0)

        def LEFT_PAREN(self):
            return self.getToken(GLSLParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(GLSLParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GLSLParser.RIGHT_PAREN, 0)

        def selection_rest_statement(self):
            return self.getTypedRuleContext(GLSLParser.Selection_rest_statementContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_selection_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_statement" ):
                listener.enterSelection_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_statement" ):
                listener.exitSelection_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelection_statement" ):
                return visitor.visitSelection_statement(self)
            else:
                return visitor.visitChildren(self)




    def selection_statement(self):

        localctx = GLSLParser.Selection_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_selection_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(GLSLParser.IF)
            self.state = 716
            self.match(GLSLParser.LEFT_PAREN)
            self.state = 717
            self.expression(0)
            self.state = 718
            self.match(GLSLParser.RIGHT_PAREN)
            self.state = 719
            self.selection_rest_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_rest_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GLSLParser.StatementContext)
            else:
                return self.getTypedRuleContext(GLSLParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(GLSLParser.ELSE, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_selection_rest_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_rest_statement" ):
                listener.enterSelection_rest_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_rest_statement" ):
                listener.exitSelection_rest_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelection_rest_statement" ):
                return visitor.visitSelection_rest_statement(self)
            else:
                return visitor.visitChildren(self)




    def selection_rest_statement(self):

        localctx = GLSLParser.Selection_rest_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_selection_rest_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.statement()
            self.state = 724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 722
                self.match(GLSLParser.ELSE)
                self.state = 723
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GLSLParser.ExpressionContext,0)


        def fully_specified_type(self):
            return self.getTypedRuleContext(GLSLParser.Fully_specified_typeContext,0)


        def IDENTIFIER(self):
            return self.getToken(GLSLParser.IDENTIFIER, 0)

        def EQUAL(self):
            return self.getToken(GLSLParser.EQUAL, 0)

        def initializer(self):
            return self.getTypedRuleContext(GLSLParser.InitializerContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = GLSLParser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_condition)
        try:
            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 726
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self.fully_specified_type()
                self.state = 728
                self.match(GLSLParser.IDENTIFIER)
                self.state = 729
                self.match(GLSLParser.EQUAL)
                self.state = 730
                self.initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(GLSLParser.SWITCH, 0)

        def LEFT_PAREN(self):
            return self.getToken(GLSLParser.LEFT_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(GLSLParser.ExpressionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GLSLParser.RIGHT_PAREN, 0)

        def LEFT_BRACE(self):
            return self.getToken(GLSLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(GLSLParser.RIGHT_BRACE, 0)

        def statement_list(self):
            return self.getTypedRuleContext(GLSLParser.Statement_listContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_switch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_statement" ):
                listener.enterSwitch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_statement" ):
                listener.exitSwitch_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_statement" ):
                return visitor.visitSwitch_statement(self)
            else:
                return visitor.visitChildren(self)




    def switch_statement(self):

        localctx = GLSLParser.Switch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_switch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(GLSLParser.SWITCH)
            self.state = 735
            self.match(GLSLParser.LEFT_PAREN)
            self.state = 736
            self.expression(0)
            self.state = 737
            self.match(GLSLParser.RIGHT_PAREN)
            self.state = 738
            self.match(GLSLParser.LEFT_BRACE)
            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8589934594) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -9007199321841665) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4503599493205759) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 2171300179101648895) != 0) or _la==257:
                self.state = 739
                self.statement_list()


            self.state = 742
            self.match(GLSLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(GLSLParser.CASE, 0)

        def expression(self):
            return self.getTypedRuleContext(GLSLParser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(GLSLParser.COLON, 0)

        def DEFAULT(self):
            return self.getToken(GLSLParser.DEFAULT, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_case_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_label" ):
                listener.enterCase_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_label" ):
                listener.exitCase_label(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_label" ):
                return visitor.visitCase_label(self)
            else:
                return visitor.visitChildren(self)




    def case_label(self):

        localctx = GLSLParser.Case_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_case_label)
        try:
            self.state = 750
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.enterOuterAlt(localctx, 1)
                self.state = 744
                self.match(GLSLParser.CASE)
                self.state = 745
                self.expression(0)
                self.state = 746
                self.match(GLSLParser.COLON)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 748
                self.match(GLSLParser.DEFAULT)
                self.state = 749
                self.match(GLSLParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Iteration_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(GLSLParser.WHILE, 0)

        def LEFT_PAREN(self):
            return self.getToken(GLSLParser.LEFT_PAREN, 0)

        def condition(self):
            return self.getTypedRuleContext(GLSLParser.ConditionContext,0)


        def RIGHT_PAREN(self):
            return self.getToken(GLSLParser.RIGHT_PAREN, 0)

        def statement_no_new_scope(self):
            return self.getTypedRuleContext(GLSLParser.Statement_no_new_scopeContext,0)


        def DO(self):
            return self.getToken(GLSLParser.DO, 0)

        def statement(self):
            return self.getTypedRuleContext(GLSLParser.StatementContext,0)


        def expression(self):
            return self.getTypedRuleContext(GLSLParser.ExpressionContext,0)


        def SEMICOLON(self):
            return self.getToken(GLSLParser.SEMICOLON, 0)

        def FOR(self):
            return self.getToken(GLSLParser.FOR, 0)

        def for_init_statement(self):
            return self.getTypedRuleContext(GLSLParser.For_init_statementContext,0)


        def for_rest_statement(self):
            return self.getTypedRuleContext(GLSLParser.For_rest_statementContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_iteration_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteration_statement" ):
                listener.enterIteration_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteration_statement" ):
                listener.exitIteration_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIteration_statement" ):
                return visitor.visitIteration_statement(self)
            else:
                return visitor.visitChildren(self)




    def iteration_statement(self):

        localctx = GLSLParser.Iteration_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_iteration_statement)
        try:
            self.state = 773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [202]:
                self.enterOuterAlt(localctx, 1)
                self.state = 752
                self.match(GLSLParser.WHILE)
                self.state = 753
                self.match(GLSLParser.LEFT_PAREN)
                self.state = 754
                self.condition()
                self.state = 755
                self.match(GLSLParser.RIGHT_PAREN)
                self.state = 756
                self.statement_no_new_scope()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 758
                self.match(GLSLParser.DO)
                self.state = 759
                self.statement()
                self.state = 760
                self.match(GLSLParser.WHILE)
                self.state = 761
                self.match(GLSLParser.LEFT_PAREN)
                self.state = 762
                self.expression(0)
                self.state = 763
                self.match(GLSLParser.RIGHT_PAREN)
                self.state = 764
                self.match(GLSLParser.SEMICOLON)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 3)
                self.state = 766
                self.match(GLSLParser.FOR)
                self.state = 767
                self.match(GLSLParser.LEFT_PAREN)
                self.state = 768
                self.for_init_statement()
                self.state = 769
                self.for_rest_statement()
                self.state = 770
                self.match(GLSLParser.RIGHT_PAREN)
                self.state = 771
                self.statement_no_new_scope()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_init_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression_statement(self):
            return self.getTypedRuleContext(GLSLParser.Expression_statementContext,0)


        def declaration_statement(self):
            return self.getTypedRuleContext(GLSLParser.Declaration_statementContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_for_init_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_init_statement" ):
                listener.enterFor_init_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_init_statement" ):
                listener.exitFor_init_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_init_statement" ):
                return visitor.visitFor_init_statement(self)
            else:
                return visitor.visitChildren(self)




    def for_init_statement(self):

        localctx = GLSLParser.For_init_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_for_init_statement)
        try:
            self.state = 777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 775
                self.expression_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 776
                self.declaration_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_rest_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(GLSLParser.SEMICOLON, 0)

        def condition(self):
            return self.getTypedRuleContext(GLSLParser.ConditionContext,0)


        def expression(self):
            return self.getTypedRuleContext(GLSLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_for_rest_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_rest_statement" ):
                listener.enterFor_rest_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_rest_statement" ):
                listener.exitFor_rest_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_rest_statement" ):
                return visitor.visitFor_rest_statement(self)
            else:
                return visitor.visitChildren(self)




    def for_rest_statement(self):

        localctx = GLSLParser.For_rest_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_for_rest_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -696053195282) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -11540474112237569) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 4503599493172991) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & 2170737228074485247) != 0) or _la==257:
                self.state = 779
                self.condition()


            self.state = 782
            self.match(GLSLParser.SEMICOLON)
            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -6917529530286505755) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -4501401023543297) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & -9222246411859393985) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -8138003422817533829) != 0):
                self.state = 783
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Jump_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(GLSLParser.CONTINUE, 0)

        def SEMICOLON(self):
            return self.getToken(GLSLParser.SEMICOLON, 0)

        def BREAK(self):
            return self.getToken(GLSLParser.BREAK, 0)

        def RETURN(self):
            return self.getToken(GLSLParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(GLSLParser.ExpressionContext,0)


        def DISCARD(self):
            return self.getToken(GLSLParser.DISCARD, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_jump_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJump_statement" ):
                listener.enterJump_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJump_statement" ):
                listener.exitJump_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJump_statement" ):
                return visitor.visitJump_statement(self)
            else:
                return visitor.visitChildren(self)




    def jump_statement(self):

        localctx = GLSLParser.Jump_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_jump_statement)
        self._la = 0 # Token type
        try:
            self.state = 797
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 786
                self.match(GLSLParser.CONTINUE)
                self.state = 787
                self.match(GLSLParser.SEMICOLON)
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 788
                self.match(GLSLParser.BREAK)
                self.state = 789
                self.match(GLSLParser.SEMICOLON)
                pass
            elif token in [115]:
                self.enterOuterAlt(localctx, 3)
                self.state = 790
                self.match(GLSLParser.RETURN)
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & -6917529530286505755) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -4501401023543297) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & -9222246411859393985) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -8138003422817533829) != 0):
                    self.state = 791
                    self.expression(0)


                self.state = 794
                self.match(GLSLParser.SEMICOLON)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 4)
                self.state = 795
                self.match(GLSLParser.DISCARD)
                self.state = 796
                self.match(GLSLParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_definition(self):
            return self.getTypedRuleContext(GLSLParser.Function_definitionContext,0)


        def declaration(self):
            return self.getTypedRuleContext(GLSLParser.DeclarationContext,0)


        def SEMICOLON(self):
            return self.getToken(GLSLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return GLSLParser.RULE_external_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_declaration" ):
                listener.enterExternal_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_declaration" ):
                listener.exitExternal_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternal_declaration" ):
                return visitor.visitExternal_declaration(self)
            else:
                return visitor.visitChildren(self)




    def external_declaration(self):

        localctx = GLSLParser.External_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_external_declaration)
        try:
            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 799
                self.function_definition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 800
                self.declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 801
                self.match(GLSLParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_prototype(self):
            return self.getTypedRuleContext(GLSLParser.Function_prototypeContext,0)


        def compound_statement_no_new_scope(self):
            return self.getTypedRuleContext(GLSLParser.Compound_statement_no_new_scopeContext,0)


        def getRuleIndex(self):
            return GLSLParser.RULE_function_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_definition" ):
                listener.enterFunction_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_definition" ):
                listener.exitFunction_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_definition" ):
                return visitor.visitFunction_definition(self)
            else:
                return visitor.visitChildren(self)




    def function_definition(self):

        localctx = GLSLParser.Function_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_function_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.function_prototype()
            self.state = 805
            self.compound_statement_no_new_scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[3] = self.postfix_expression_sempred
        self._predicates[13] = self.binary_expression_sempred
        self._predicates[14] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def postfix_expression_sempred(self, localctx:Postfix_expressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def binary_expression_sempred(self, localctx:Binary_expressionContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 1)
         




